{"/home/travis/build/npmtest/node-npmtest-clam/test.js":"/* istanbul instrument in package npmtest_clam */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-clam/lib.npmtest_clam.js":"/* istanbul instrument in package npmtest_clam */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_clam = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_clam = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-clam/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-clam && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_clam */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_clam\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_clam.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_clam.rollup.js'] =\n            local.assetsDict['/assets.npmtest_clam.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_clam.__dirname + '/lib.npmtest_clam.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-clam/node_modules/clam/index.js":"var connect = require('connect');\nvar http = require('http');\nvar app = connect();\nvar project = require('./lib/project.js');\nvar config = require('./lib/config.js');\nvar path = require('path');\nvar debug = require('debug')('clam:index');\nvar template = require('./lib/template.js');\nvar mod = require('./lib/mod.js');\nvar page = require('./lib/page.js');\nvar widget = require('./lib/widget.js');\n\nvar clam = module.exports = {\n    init: function(){\n        config.init();\n        template.init();\n        var ret = project({});\n\n        ret.data.forEach(function (ac) {\n            debug(ac.action, ac.content);\n        });\n        process.exit(0);\n    },\n    on: function(){\n        var prjInfo = config.get('project');\n        if (!prjInfo) {\n            console.log('Execute \"clam init\".');\n            return;\n        }\n        var startServer = require('./lib/server.js');\n        startServer(false);\n    },\n    build: function(timestamp){\n        var build = require('./lib/build.js');\n        build.build('server', timestamp);\n    }\n}\n// clam.on();","/home/travis/build/npmtest/node-npmtest-clam/node_modules/clam/lib/project.js":"var fs = require('fs');\nvar mkdirp = require('mkdirp');\nvar path = require('path');\nvar _ = require(\"underscore\");\nvar debug = require('debug')('clam:project');\nvar config = require('./config.js');\nvar util = require('util');\nvar hostSwitch = require('./hosts.js');\nvar http = require('http');\n\n//默认项目配置信息\nvar initConf = {\n  name: '',\n  pageext: [\"html\"],               // html   | vm\n  pagedirlevel: [\"single\"],       // single | multi\n  build: [\"merge\"],                // merge  | combo\n  charset: [\"gbk\", \"utf-8\"],\n  pagesDir: 'src/pages',\n  modsDir: 'src/mods',\n  widgetsDir: 'src/widgets',\n  buildDir: 'build',\n  testsDir: 'tests',\n  cdnPath: '',\n  port: [80, 443],\n  urls: {},\n  hosts: '',\n  hostsMap: {},                    // 域名代理\n  json: [],\n  filter: {}\n};\n\n//用户项目目录\nvar prjDir = '.';\n\n/**\n * 返回或者设置项目信息\n * 如果传入参数为空，则返回项目信息。\n * 如果传入参数不为空，则设置项目信息。\n * 设置的项目信息最后保存到.clam/project.json中\n * @param dir 某个项目的子孙目录，此参数被用来寻找项目的根目录\n * @param prj 需要设置的项目元数据\n */\nexports = module.exports = function (prj) {\n  prjDir = config.root();\n  debug('项目目录:%s', prjDir);\n  var state = prjState(prjDir);\n  debug('项目状态:%s', state);\n  if (!prj) {\n    var info = getProject(prjDir, state);\n    return info;\n  }\n\n  var actions = [];\n  if (state !== 'normal') {\n    if (state === 'blank') {\n      var pagesFullDir = path.join(prjDir, initConf.pagesDir);\n      mkdirp.sync(pagesFullDir);\n      actions.push({action: '创建页面目录', content: pagesFullDir});\n\n      var modsFullDir = path.join(prjDir, initConf.modsDir);\n      mkdirp.sync(modsFullDir);\n      actions.push({action: '创建模块目录', content: modsFullDir});\n\n      var widgetsFullDir = path.join(prjDir, initConf.widgetsDir)\n      mkdirp.sync(widgetsFullDir);\n      actions.push({action: '创建组件目录', content: widgetsFullDir});\n\n      var buildFullDir = path.join(prjDir, initConf.buildDir);\n      mkdirp.sync(buildFullDir);\n      actions.push({action: '创建构建目录', content: buildFullDir});\n\n      var testsFullDir = path.join(prjDir, initConf.testsDir);\n      mkdirp.sync(testsFullDir);\n      actions.push({action: '创建测试目录', content: testsFullDir});\n    }\n    prj = initConf;\n    var dirs = prjDir.split(path.sep);\n    prj.name = dirs[dirs.length - 1];\n  }\n\n\n  var oldPrj = config.get('project') || prj;\n  if (oldPrj.hosts && prj.hosts && oldPrj.hosts !== prj.hosts) {\n    hostSwitch.setHosts(prj.hosts);\n    actions.push({action: '更新hosts文件', content: '操作系统hosts文件'});\n  }\n  for (var k in prj) {\n    oldPrj[k] = prj[k];\n  }\n\n  config.set('project', oldPrj);\n  actions.push({action: '更新项目元文件', content: '.clam/project.json'});\n\n  //getMuiConfig();\n  //actions.push({action: '更新项目gconfig文件', content: '.clam/gconfig.json'});\n\n  return {\n    succeed: true,\n    msg: '更新项目信息',\n    data: actions\n  };\n}\n/**\n * 设置cdn的跳转规则\n */\nexports.setUrls = function (urls) {\n  if (!urls) {\n    return {\n      succeed: false,\n      msg: '更新项目信息',\n      data: actions\n    };\n  }\n  prjDir = config.root();\n  var prj = config.get('project');\n  prj.urls = urls;\n  config.set('project', prj);\n  config.set('project', prj);\n  var actions = [];\n  actions.push({action: '更新项目元文件', content: '.clam/project.json'});\n  return {\n    succeed: true,\n    msg: '更新项目信息',\n    data: actions\n  };\n}\n/**\n * 获取项目信息\n * @param prjDir 项目根目录\n * @param state  当前项目状态\n * @return {Object} 项目信息\n */\nfunction getProject(prjDir, state) {\n  //正常项目的元数据完全从配置文件中获取\n  if (state === 'normal') {\n    return config.get('project');\n  }\n\n  var prjInfo = {\n    state: state,\n    prjDir: prjDir\n  };\n\n  //异常项目的数据从默认配置中复制\n  for (var conf in initConf) {\n    prjInfo[conf] = initConf[conf];\n  }\n\n  var dirs = prjDir.split(path.sep);\n  prjInfo.name = dirs[dirs.length - 1];\n  return prjInfo;\n}\n\n/**\n * 返回项目状态\n * @param root 项目根目录\n * @return {String} normal => 包含.clam目录|past => 不包含.clam且项目目录不为空|blank => 不包含.clam且项目目录为空\n */\nfunction prjState(root) {\n  var state = 'normal';\n  if (!fs.existsSync(path.join(root, '.clam'))) {\n    state = 'past';\n    var list = fs.readdirSync(root);\n    list = _.filter(list, function (file) {\n\n      return !(/^\\..+/.test(file));\n    });\n    if (list.length === 0) {\n      state = 'blank';\n    }\n  }\n  return state;\n}\n\n/**\n * 从mui服务器上拉去最新的 globalConfig，在项目创建时自动生成\n */\nfunction getMuiConfig() {\n  var remoteUrl = 'http://demo.mui.tmall.net/gitsrc/seed/build/config.json';\n  var req = http.request(remoteUrl, function (res) {\n    var str = '';\n    res.on('data', function (d) {\n      str += d;\n    });\n    res.on('end', function () {\n      try {\n        config.set('gconfig', JSON.parse(str.toString()));\n      }\n      catch (e) {\n        config.set('gconfig', {});\n      }\n      process.exit(0);\n    });\n    res.on('error', function () {\n      debug('远程获取gconfig失败！', '');\n      process.exit(0);\n    });\n  });\n  req.end();\n}\n","/home/travis/build/npmtest/node-npmtest-clam/node_modules/clam/lib/config.js":"var fs = require('fs');\nvar mkdirp = require('mkdirp');\nvar path = require('path');\nvar _ = require(\"underscore\");\nvar beautify = require('./util/beautify.js').js_beautify;\nvar debug = require('debug')('clam:config');\nvar util = require('util')\nvar EventEmitter = require('events').EventEmitter\n\n//project 模块配置信息\nvar META = {\n    dir : '.clam'\n};\n\nvar PRJROOT = null; //项目根路径\nvar CONFIG = {};   //配置信息\nvar EVENT = new EventEmitter();\n\n/**\n * 保存一个配置信息\n * @param key\n * @param config\n */\nfunction set(key, config){\n    if(!PRJROOT){\n        init();\n    }\n    var metaDir = path.join(PRJROOT, META.dir);\n    debug('目录:%s', metaDir);\n    var metaFileName = path.join(metaDir, key+'.json');\n    CONFIG[key] = config;\n    if(!fs.existsSync(metaDir)){\n        mkdirp.sync(metaDir);\n    }\n    var configStr = JSON.stringify(config);\n    configStr = beautify(configStr);\n\n    if(!fs.existsSync(metaFileName)){\n        debug(\"创建配置文件 %s\",metaFileName);\n        fs.writeFileSync(metaFileName, configStr);\n        createWatch(key+'.json', metaDir);\n        return;\n    }\n\n    fs.writeFileSync(metaFileName, configStr);\n    return;\n}\n\nfunction readFromFile(file) {\n    var metaDir = path.join(PRJROOT, META.dir);\n    var metaFile = path.join(metaDir, file);\n    var key = file.replace('.json', '');\n    if(!fs.existsSync(metaFile)){\n        CONFIG[key] = null;\n        return;\n    }\n    var metaStr = fs.readFileSync(metaFile);\n    debug('从文件%s获取配置信息。', key);\n    metaStr = metaStr.toString().replace(/[\\n\\r]/g, '');\n    CONFIG[key] = JSON.parse(metaStr);\n\n    //从project中获取cdnPath属性，取消最后一个'/'字符\n    if (key === 'project') {\n        var url = CONFIG[key].cdnPath;\n        if (url && url.length > 2 && url[url.length - 1] === '/') {\n            CONFIG[key].cdnPath =  url.slice(0, url.length - 1);\n        }\n\n        if (typeof CONFIG[key].filter == \"undefined\") {\n            CONFIG[key].filter = {};\n        }\n    }\n}\n\n/**\n * 获取配置信息\n * @param key\n * @return {*}\n */\nfunction get(key){\n    if(!PRJROOT){\n        init();\n    }\n    return CONFIG[key];\n}\n\nfunction root(){\n    if(!PRJROOT){\n        init();\n    }\n    return PRJROOT;\n}\n\n/**\n * 创建一个文件watch\n * @param file\n * @param metaDir\n */\nfunction createWatch(file, metaDir) {\n    debug(\"监听%s\", file);\n    var fullPath = path.join(metaDir, file);\n    var key = file.replace('.json', '');\n    fs.watch(fullPath, function (event) {\n        readFromFile(file);\n        EVENT.emit(key + 'Change', key);\n    });\n    EVENT.emit(key + 'Change', key);\n}\n\n/**\n * 寻找项目根目录并初始化变量。\n * @param dir 从此参数指定的目录起，开始向上寻找项目目录。一旦发现此目录或者最近祖先目录包含.clam目录，则认定其为项目根目录。\n * @return {*} 项目根目录\n */\nfunction init() {\n\n    //只初始化一次\n    if (PRJROOT) {\n        return;\n    }\n\n    //命令行传入的目录参数在不同调用方式下下标不同，处理相对路径为绝对路径\n    var argvs = process.argv;\n    var dir = process.cwd();\n\n    //从获取命令行--root参数\n    for (var i = 0; i < argvs.length; i++) {\n        if (argvs[i] === '--root' || argvs[i] === '-r') {\n            if (i + 1 < argvs.length) {\n                dir = argvs[i + 1];\n            }\n        }\n    }\n    dir = path.resolve(dir);\n    var metaDir = path.join(dir, META.dir);\n\n    //兼容windows和Linux路径\n    while (!fs.existsSync(metaDir) && metaDir !== '/' + META.dir && !metaDir.match(/\\w{1,1}:\\\\.clam/)) {\n        metaDir = path.join(metaDir, '../..', META.dir);\n    }\n    PRJROOT = path.join(metaDir, '..');\n    if (PRJROOT === '/' || PRJROOT.match(/\\w{1,1}:\\\\$/)) {\n        PRJROOT = dir;\n    }\n\n    var metaDir = path.join(PRJROOT, META.dir);\n    if(!fs.existsSync(metaDir)){\n        return;\n    }\n    var files = fs.readdirSync(metaDir);\n    debug('%s目录，文件列表%s', metaDir, util.inspect(files));\n\n    files.forEach(function (file, i) {\n        if (/.+\\.json$/.test(file)) {\n            readFromFile(file);\n            createWatch(file, metaDir);\n        }\n    });\n}\n\nfunction on(evtName, fn){\n    return EVENT.on(evtName, fn);\n}\n\nexports.set = set;\nexports.get = get;\nexports.root = root;\nexports.on = on;\nexports.init = init;\n","/home/travis/build/npmtest/node-npmtest-clam/node_modules/clam/lib/util/beautify.js":"/*jslint onevar: false, plusplus: false */\n/*jshint curly:true, eqeqeq:true, laxbreak:true, noempty:false */\n/*\n\n JS Beautifier\n---------------\n\n\n  Written by Einar Lielmanis, <einar@jsbeautifier.org>\n      http://jsbeautifier.org/\n\n  Originally converted to javascript by Vital, <vital76@gmail.com>\n  \"End braces on own line\" added by Chris J. Shull, <chrisjshull@gmail.com>\n\n  You are free to use this in any way you want, in case you find this useful or working for you.\n\n  Usage:\n    js_beautify(js_source_text);\n    js_beautify(js_source_text, options);\n\n  The options are:\n    indent_size (default 4)          - indentation size,\n    indent_char (default space)      - character to indent with,\n    preserve_newlines (default true) - whether existing line breaks should be preserved,\n    max_preserve_newlines (default unlimited) - maximum number of line breaks to be preserved in one chunk,\n\n    jslint_happy (default false) - if true, then jslint-stricter mode is enforced.\n\n            jslint_happy   !jslint_happy\n            ---------------------------------\n             function ()      function()\n\n    brace_style (default \"collapse\") - \"collapse\" | \"expand\" | \"end-expand\" | \"expand-strict\"\n            put braces on the same line as control statements (default), or put braces on own line (Allman / ANSI style), or just put end braces on own line.\n\n            expand-strict: put brace on own line even in such cases:\n\n                var a =\n                {\n                    a: 5,\n                    b: 6\n                }\n            This mode may break your scripts - e.g \"return { a: 1 }\" will be broken into two lines, so beware.\n\n    space_before_conditional (default true) - should the space before conditional statement be added, \"if(true)\" vs \"if (true)\",\n\n    unescape_strings (default false) - should printable characters in strings encoded in \\xNN notation be unescaped, \"example\" vs \"\\x65\\x78\\x61\\x6d\\x70\\x6c\\x65\"\n\n    e.g\n\n    js_beautify(js_source_text, {\n      'indent_size': 1,\n      'indent_char': '\\t'\n    });\n\n\n*/\n\n\n\nfunction js_beautify(js_source_text, options) {\n\n    var input, output, token_text, last_type, last_text, last_last_text, last_word, flags, flag_store, indent_string;\n    var whitespace, wordchar, punct, parser_pos, line_starters, digits;\n    var prefix, token_type, do_block_just_closed;\n    var wanted_newline, just_added_newline, n_newlines;\n    var preindent_string = '';\n\n\n    // Some interpreters have unexpected results with foo = baz || bar;\n    options = options ? options : {};\n\n    var opt_brace_style;\n\n    // compatibility\n    if (options.space_after_anon_function !== undefined && options.jslint_happy === undefined) {\n        options.jslint_happy = options.space_after_anon_function;\n    }\n    if (options.braces_on_own_line !== undefined) { //graceful handling of deprecated option\n        opt_brace_style = options.braces_on_own_line ? \"expand\" : \"collapse\";\n    }\n    opt_brace_style = options.brace_style ? options.brace_style : (opt_brace_style ? opt_brace_style : \"collapse\");\n\n\n    var opt_indent_size = options.indent_size ? options.indent_size : 4,\n        opt_indent_char = options.indent_char ? options.indent_char : ' ',\n        opt_preserve_newlines = typeof options.preserve_newlines === 'undefined' ? true : options.preserve_newlines,\n        opt_break_chained_methods = typeof options.break_chained_methods === 'undefined' ? false : options.break_chained_methods,\n        opt_max_preserve_newlines = typeof options.max_preserve_newlines === 'undefined' ? false : options.max_preserve_newlines,\n        opt_jslint_happy = options.jslint_happy === 'undefined' ? false : options.jslint_happy,\n        opt_keep_array_indentation = typeof options.keep_array_indentation === 'undefined' ? false : options.keep_array_indentation,\n        opt_space_before_conditional = typeof options.space_before_conditional === 'undefined' ? true : options.space_before_conditional,\n        opt_unescape_strings = typeof options.unescape_strings === 'undefined' ? false : options.unescape_strings;\n\n    just_added_newline = false;\n\n    // cache the source's length.\n    var input_length = js_source_text.length;\n\n    function trim_output(eat_newlines) {\n        eat_newlines = typeof eat_newlines === 'undefined' ? false : eat_newlines;\n        while (output.length && (output[output.length - 1] === ' '\n            || output[output.length - 1] === indent_string\n            || output[output.length - 1] === preindent_string\n            || (eat_newlines && (output[output.length - 1] === '\\n' || output[output.length - 1] === '\\r')))) {\n            output.pop();\n        }\n    }\n\n    function trim(s) {\n        return s.replace(/^\\s\\s*|\\s\\s*$/, '');\n    }\n\n    // we could use just string.split, but\n    // IE doesn't like returning empty strings\n    function split_newlines(s) {\n        //return s.split(/\\x0d\\x0a|\\x0a/);\n\n        s = s.replace(/\\x0d/g, '');\n        var out = [],\n            idx = s.indexOf(\"\\n\");\n        while (idx !== -1) {\n            out.push(s.substring(0, idx));\n            s = s.substring(idx + 1);\n            idx = s.indexOf(\"\\n\");\n        }\n        if (s.length) {\n            out.push(s);\n        }\n        return out;\n    }\n\n    function force_newline() {\n        var old_keep_array_indentation = opt_keep_array_indentation;\n        opt_keep_array_indentation = false;\n        print_newline();\n        opt_keep_array_indentation = old_keep_array_indentation;\n    }\n\n    function print_newline(ignore_repeated, reset_statement_flags) {\n\n        flags.eat_next_space = false;\n        if (opt_keep_array_indentation && is_array(flags.mode)) {\n            return;\n        }\n\n        ignore_repeated = typeof ignore_repeated === 'undefined' ? true : ignore_repeated;\n        reset_statement_flags = typeof reset_statement_flags === 'undefined' ? true : reset_statement_flags;\n\n        if (reset_statement_flags) {\n            flags.if_line = false;\n            flags.chain_extra_indentation = 0;\n        }\n\n        trim_output();\n\n        if (!output.length) {\n            return; // no newline on start of file\n        }\n\n        if (output[output.length - 1] !== \"\\n\" || !ignore_repeated) {\n            just_added_newline = true;\n            output.push(\"\\n\");\n        }\n        if (preindent_string) {\n            output.push(preindent_string);\n        }\n        for (var i = 0; i < flags.indentation_level + flags.chain_extra_indentation; i += 1) {\n            output.push(indent_string);\n        }\n        if (flags.var_line && flags.var_line_reindented) {\n            output.push(indent_string); // skip space-stuffing, if indenting with a tab\n        }\n    }\n\n\n\n    function print_single_space() {\n\n        if (last_type === 'TK_COMMENT') {\n            return print_newline();\n        }\n        if (flags.eat_next_space) {\n            flags.eat_next_space = false;\n            return;\n        }\n        var last_output = ' ';\n        if (output.length) {\n            last_output = output[output.length - 1];\n        }\n        if (last_output !== ' ' && last_output !== '\\n' && last_output !== indent_string) { // prevent occassional duplicate space\n            output.push(' ');\n        }\n    }\n\n\n    function print_token() {\n        just_added_newline = false;\n        flags.eat_next_space = false;\n        output.push(token_text);\n    }\n\n    function indent() {\n        flags.indentation_level += 1;\n    }\n\n\n    function remove_indent() {\n        if (output.length && output[output.length - 1] === indent_string) {\n            output.pop();\n        }\n    }\n\n    function set_mode(mode) {\n        if (flags) {\n            flag_store.push(flags);\n        }\n        flags = {\n            previous_mode: flags ? flags.mode : 'BLOCK',\n            mode: mode,\n            var_line: false,\n            var_line_tainted: false,\n            var_line_reindented: false,\n            in_html_comment: false,\n            if_line: false,\n            chain_extra_indentation: 0,\n            in_case_statement: false, // switch(..){ INSIDE HERE }\n            in_case: false, // we're on the exact line with \"case 0:\"\n            case_body: false, // the indented case-action block\n            eat_next_space: false,\n            indentation_level: (flags ? flags.indentation_level + ((flags.var_line && flags.var_line_reindented) ? 1 : 0) : 0),\n            ternary_depth: 0\n        };\n    }\n\n    function is_array(mode) {\n        return mode === '[EXPRESSION]' || mode === '[INDENTED-EXPRESSION]';\n    }\n\n    function is_expression(mode) {\n        return in_array(mode, ['[EXPRESSION]', '(EXPRESSION)', '(FOR-EXPRESSION)', '(COND-EXPRESSION)']);\n    }\n\n    function restore_mode() {\n        do_block_just_closed = flags.mode === 'DO_BLOCK';\n        if (flag_store.length > 0) {\n            var mode = flags.mode;\n            flags = flag_store.pop();\n            flags.previous_mode = mode;\n        }\n    }\n\n    function all_lines_start_with(lines, c) {\n        for (var i = 0; i < lines.length; i++) {\n            var line = trim(lines[i]);\n            if (line.charAt(0) !== c) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    function is_special_word(word) {\n        return in_array(word, ['case', 'return', 'do', 'if', 'throw', 'else']);\n    }\n\n    function in_array(what, arr) {\n        for (var i = 0; i < arr.length; i += 1) {\n            if (arr[i] === what) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    function look_up(exclude) {\n        var local_pos = parser_pos;\n        var c = input.charAt(local_pos);\n        while (in_array(c, whitespace) && c !== exclude) {\n            local_pos++;\n            if (local_pos >= input_length) {\n                return 0;\n            }\n            c = input.charAt(local_pos);\n        }\n        return c;\n    }\n\n    function get_next_token() {\n        var i;\n        var resulting_string;\n\n        n_newlines = 0;\n\n        if (parser_pos >= input_length) {\n            return ['', 'TK_EOF'];\n        }\n\n        wanted_newline = false;\n\n        var c = input.charAt(parser_pos);\n        parser_pos += 1;\n\n\n        var keep_whitespace = opt_keep_array_indentation && is_array(flags.mode);\n\n        if (keep_whitespace) {\n\n            var whitespace_count = 0;\n\n            while (in_array(c, whitespace)) {\n\n                if (c === \"\\n\") {\n                    trim_output();\n                    output.push(\"\\n\");\n                    just_added_newline = true;\n                    whitespace_count = 0;\n                } else {\n                    if (c === '\\t') {\n                        whitespace_count += 4;\n                    } else if (c === '\\r') {\n                        // nothing\n                    } else {\n                        whitespace_count += 1;\n                    }\n                }\n\n                if (parser_pos >= input_length) {\n                    return ['', 'TK_EOF'];\n                }\n\n                c = input.charAt(parser_pos);\n                parser_pos += 1;\n\n            }\n\n            if (just_added_newline) {\n                for (i = 0; i < whitespace_count; i++) {\n                    output.push(' ');\n                }\n            }\n\n        } else {\n            while (in_array(c, whitespace)) {\n\n                if (c === \"\\n\") {\n                    n_newlines += ((opt_max_preserve_newlines) ? (n_newlines <= opt_max_preserve_newlines) ? 1 : 0 : 1);\n                }\n\n\n                if (parser_pos >= input_length) {\n                    return ['', 'TK_EOF'];\n                }\n\n                c = input.charAt(parser_pos);\n                parser_pos += 1;\n\n            }\n\n            if (opt_preserve_newlines) {\n                if (n_newlines > 1) {\n                    for (i = 0; i < n_newlines; i += 1) {\n                        print_newline(i === 0);\n                        just_added_newline = true;\n                    }\n                }\n            }\n            wanted_newline = n_newlines > 0;\n        }\n\n\n        if (in_array(c, wordchar)) {\n            if (parser_pos < input_length) {\n                while (in_array(input.charAt(parser_pos), wordchar)) {\n                    c += input.charAt(parser_pos);\n                    parser_pos += 1;\n                    if (parser_pos === input_length) {\n                        break;\n                    }\n                }\n            }\n\n            // small and surprisingly unugly hack for 1E-10 representation\n            if (parser_pos !== input_length && c.match(/^[0-9]+[Ee]$/) && (input.charAt(parser_pos) === '-' || input.charAt(parser_pos) === '+')) {\n\n                var sign = input.charAt(parser_pos);\n                parser_pos += 1;\n\n                var t = get_next_token();\n                c += sign + t[0];\n                return [c, 'TK_WORD'];\n            }\n\n            if (c === 'in') { // hack for 'in' operator\n                return [c, 'TK_OPERATOR'];\n            }\n            if (wanted_newline && last_type !== 'TK_OPERATOR'\n                && last_type !== 'TK_EQUALS'\n                && !flags.if_line && (opt_preserve_newlines || last_text !== 'var')) {\n                print_newline();\n            }\n            return [c, 'TK_WORD'];\n        }\n\n        if (c === '(' || c === '[') {\n            return [c, 'TK_START_EXPR'];\n        }\n\n        if (c === ')' || c === ']') {\n            return [c, 'TK_END_EXPR'];\n        }\n\n        if (c === '{') {\n            return [c, 'TK_START_BLOCK'];\n        }\n\n        if (c === '}') {\n            return [c, 'TK_END_BLOCK'];\n        }\n\n        if (c === ';') {\n            return [c, 'TK_SEMICOLON'];\n        }\n\n        if (c === '/') {\n            var comment = '';\n            // peek for comment /* ... */\n            var inline_comment = true;\n            if (input.charAt(parser_pos) === '*') {\n                parser_pos += 1;\n                if (parser_pos < input_length) {\n                    while (parser_pos < input_length &&\n                        ! (input.charAt(parser_pos) === '*' && input.charAt(parser_pos + 1) && input.charAt(parser_pos + 1) === '/')) {\n                        c = input.charAt(parser_pos);\n                        comment += c;\n                        if (c === \"\\n\" || c === \"\\r\") {\n                            inline_comment = false;\n                        }\n                        parser_pos += 1;\n                        if (parser_pos >= input_length) {\n                            break;\n                        }\n                    }\n                }\n                parser_pos += 2;\n                if (inline_comment && n_newlines === 0) {\n                    return ['/*' + comment + '*/', 'TK_INLINE_COMMENT'];\n                } else {\n                    return ['/*' + comment + '*/', 'TK_BLOCK_COMMENT'];\n                }\n            }\n            // peek for comment // ...\n            if (input.charAt(parser_pos) === '/') {\n                comment = c;\n                while (input.charAt(parser_pos) !== '\\r' && input.charAt(parser_pos) !== '\\n') {\n                    comment += input.charAt(parser_pos);\n                    parser_pos += 1;\n                    if (parser_pos >= input_length) {\n                        break;\n                    }\n                }\n                if (wanted_newline) {\n                    print_newline();\n                }\n                return [comment, 'TK_COMMENT'];\n            }\n\n        }\n\n        if (c === \"'\" || // string\n        c === '\"' || // string\n        (c === '/' &&\n            ((last_type === 'TK_WORD' && is_special_word(last_text)) ||\n                (last_text === ')' && in_array(flags.previous_mode, ['(COND-EXPRESSION)', '(FOR-EXPRESSION)'])) ||\n                (last_type === 'TK_COMMA' || last_type === 'TK_COMMENT' || last_type === 'TK_START_EXPR' || last_type === 'TK_START_BLOCK' || last_type === 'TK_END_BLOCK' || last_type === 'TK_OPERATOR' || last_type === 'TK_EQUALS' || last_type === 'TK_EOF' || last_type === 'TK_SEMICOLON')))) { // regexp\n            var sep = c;\n            var esc = false;\n            var esc1 = 0;\n            var esc2 = 0;\n            resulting_string = c;\n\n            if (parser_pos < input_length) {\n                if (sep === '/') {\n                    //\n                    // handle regexp separately...\n                    //\n                    var in_char_class = false;\n                    while (esc || in_char_class || input.charAt(parser_pos) !== sep) {\n                        resulting_string += input.charAt(parser_pos);\n                        if (!esc) {\n                            esc = input.charAt(parser_pos) === '\\\\';\n                            if (input.charAt(parser_pos) === '[') {\n                                in_char_class = true;\n                            } else if (input.charAt(parser_pos) === ']') {\n                                in_char_class = false;\n                            }\n                        } else {\n                            esc = false;\n                        }\n                        parser_pos += 1;\n                        if (parser_pos >= input_length) {\n                            // incomplete string/rexp when end-of-file reached.\n                            // bail out with what had been received so far.\n                            return [resulting_string, 'TK_STRING'];\n                        }\n                    }\n\n                } else {\n                    //\n                    // and handle string also separately\n                    //\n                    while (esc || input.charAt(parser_pos) !== sep) {\n                        resulting_string += input.charAt(parser_pos);\n                        if (esc1 && esc1 >= esc2) {\n                            esc1 = parseInt(resulting_string.substr(-esc2), 16);\n                            if (esc1 && esc1 >= 0x20 && esc1 <= 0x7e) {\n                                esc1 = String.fromCharCode(esc1);\n                                resulting_string = resulting_string.substr(0, resulting_string.length - esc2 - 2) + (((esc1 === sep) || (esc1 === '\\\\')) ? '\\\\' : '') + esc1;\n                            }\n                            esc1 = 0;\n                        }\n                        if (esc1) {\n                            esc1++;\n                        } else if (!esc) {\n                            esc = input.charAt(parser_pos) === '\\\\';\n                        } else {\n                            esc = false;\n                            if (opt_unescape_strings) {\n                                if (input.charAt(parser_pos) === 'x') {\n                                    esc1++;\n                                    esc2 = 2;\n                                } else if (input.charAt(parser_pos) === 'u') {\n                                    esc1++;\n                                    esc2 = 4;\n                                }\n                            }\n                        }\n                        parser_pos += 1;\n                        if (parser_pos >= input_length) {\n                            // incomplete string/rexp when end-of-file reached.\n                            // bail out with what had been received so far.\n                            return [resulting_string, 'TK_STRING'];\n                        }\n                    }\n                }\n\n\n\n            }\n\n            parser_pos += 1;\n\n            resulting_string += sep;\n\n            if (sep === '/') {\n                // regexps may have modifiers /regexp/MOD , so fetch those, too\n                while (parser_pos < input_length && in_array(input.charAt(parser_pos), wordchar)) {\n                    resulting_string += input.charAt(parser_pos);\n                    parser_pos += 1;\n                }\n            }\n            return [resulting_string, 'TK_STRING'];\n        }\n\n        if (c === '#') {\n\n\n            if (output.length === 0 && input.charAt(parser_pos) === '!') {\n                // shebang\n                resulting_string = c;\n                while (parser_pos < input_length && c !== '\\n') {\n                    c = input.charAt(parser_pos);\n                    resulting_string += c;\n                    parser_pos += 1;\n                }\n                output.push(trim(resulting_string) + '\\n');\n                print_newline();\n                return get_next_token();\n            }\n\n\n\n            // Spidermonkey-specific sharp variables for circular references\n            // https://developer.mozilla.org/En/Sharp_variables_in_JavaScript\n            // http://mxr.mozilla.org/mozilla-central/source/js/src/jsscan.cpp around line 1935\n            var sharp = '#';\n            if (parser_pos < input_length && in_array(input.charAt(parser_pos), digits)) {\n                do {\n                    c = input.charAt(parser_pos);\n                    sharp += c;\n                    parser_pos += 1;\n                } while (parser_pos < input_length && c !== '#' && c !== '=');\n                if (c === '#') {\n                    //\n                } else if (input.charAt(parser_pos) === '[' && input.charAt(parser_pos + 1) === ']') {\n                    sharp += '[]';\n                    parser_pos += 2;\n                } else if (input.charAt(parser_pos) === '{' && input.charAt(parser_pos + 1) === '}') {\n                    sharp += '{}';\n                    parser_pos += 2;\n                }\n                return [sharp, 'TK_WORD'];\n            }\n        }\n\n        if (c === '<' && input.substring(parser_pos - 1, parser_pos + 3) === '<!--') {\n            parser_pos += 3;\n            c = '<!--';\n            while (input.charAt(parser_pos) !== '\\n' && parser_pos < input_length) {\n                c += input.charAt(parser_pos);\n                parser_pos++;\n            }\n            flags.in_html_comment = true;\n            return [c, 'TK_COMMENT'];\n        }\n\n        if (c === '-' && flags.in_html_comment && input.substring(parser_pos - 1, parser_pos + 2) === '-->') {\n            flags.in_html_comment = false;\n            parser_pos += 2;\n            if (wanted_newline) {\n                print_newline();\n            }\n            return ['-->', 'TK_COMMENT'];\n        }\n\n        if (c === '.') {\n            return [c, 'TK_DOT'];\n        }\n\n        if (in_array(c, punct)) {\n            while (parser_pos < input_length && in_array(c + input.charAt(parser_pos), punct)) {\n                c += input.charAt(parser_pos);\n                parser_pos += 1;\n                if (parser_pos >= input_length) {\n                    break;\n                }\n            }\n\n            if (c === ',') {\n                return [c, 'TK_COMMA'];\n            } else if (c === '=') {\n                return [c, 'TK_EQUALS'];\n            } else {\n                return [c, 'TK_OPERATOR'];\n            }\n        }\n\n        return [c, 'TK_UNKNOWN'];\n    }\n\n    //----------------------------------\n    indent_string = '';\n    while (opt_indent_size > 0) {\n        indent_string += opt_indent_char;\n        opt_indent_size -= 1;\n    }\n\n    while (js_source_text && (js_source_text.charAt(0) === ' ' || js_source_text.charAt(0) === '\\t')) {\n        preindent_string += js_source_text.charAt(0);\n        js_source_text = js_source_text.substring(1);\n    }\n    input = js_source_text;\n\n    last_word = ''; // last 'TK_WORD' passed\n    last_type = 'TK_START_EXPR'; // last token type\n    last_text = ''; // last token text\n    last_last_text = ''; // pre-last token text\n    output = [];\n\n    do_block_just_closed = false;\n\n    whitespace = \"\\n\\r\\t \".split('');\n    wordchar = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_$'.split('');\n    digits = '0123456789'.split('');\n\n    punct = '+ - * / % & ++ -- = += -= *= /= %= == === != !== > < >= <= >> << >>> >>>= >>= <<= && &= | || ! !! , : ? ^ ^= |= ::';\n    punct += ' <%= <% %> <?= <? ?>'; // try to be a good boy and try not to break the markup language identifiers\n    punct = punct.split(' ');\n\n    // words which should always start on new line.\n    line_starters = 'continue,try,throw,return,var,if,switch,case,default,for,while,break,function'.split(',');\n\n    // states showing if we are currently in expression (i.e. \"if\" case) - 'EXPRESSION', or in usual block (like, procedure), 'BLOCK'.\n    // some formatting depends on that.\n    flag_store = [];\n    set_mode('BLOCK');\n\n    parser_pos = 0;\n    while (true) {\n        var t = get_next_token();\n        token_text = t[0];\n        token_type = t[1];\n        if (token_type === 'TK_EOF') {\n            break;\n        }\n\n        switch (token_type) {\n\n        case 'TK_START_EXPR':\n\n            if (token_text === '[') {\n\n                if (last_type === 'TK_WORD' || last_text === ')') {\n                    // this is array index specifier, break immediately\n                    // a[x], fn()[x]\n                    if (in_array(last_text, line_starters)) {\n                        print_single_space();\n                    }\n                    set_mode('(EXPRESSION)');\n                    print_token();\n                    break;\n                }\n\n                if (flags.mode === '[EXPRESSION]' || flags.mode === '[INDENTED-EXPRESSION]') {\n                    if (last_last_text === ']' && last_text === ',') {\n                        // ], [ goes to new line\n                        if (flags.mode === '[EXPRESSION]') {\n                            flags.mode = '[INDENTED-EXPRESSION]';\n                            if (!opt_keep_array_indentation) {\n                                indent();\n                            }\n                        }\n                        set_mode('[EXPRESSION]');\n                        if (!opt_keep_array_indentation) {\n                            print_newline();\n                        }\n                    } else if (last_text === '[') {\n                        if (flags.mode === '[EXPRESSION]') {\n                            flags.mode = '[INDENTED-EXPRESSION]';\n                            if (!opt_keep_array_indentation) {\n                                indent();\n                            }\n                        }\n                        set_mode('[EXPRESSION]');\n\n                        if (!opt_keep_array_indentation) {\n                            print_newline();\n                        }\n                    } else {\n                        set_mode('[EXPRESSION]');\n                    }\n                } else {\n                    set_mode('[EXPRESSION]');\n                }\n\n\n\n            } else {\n                if (last_word === 'for') {\n                    set_mode('(FOR-EXPRESSION)');\n                } else if (in_array(last_word, ['if', 'while'])) {\n                    set_mode('(COND-EXPRESSION)');\n                } else {\n                    set_mode('(EXPRESSION)');\n                }\n            }\n\n            if (last_text === ';' || last_type === 'TK_START_BLOCK') {\n                print_newline();\n            } else if (last_type === 'TK_END_EXPR' || last_type === 'TK_START_EXPR' || last_type === 'TK_END_BLOCK' || last_text === '.') {\n                if (wanted_newline) {\n                    print_newline();\n                }\n                // do nothing on (( and )( and ][ and ]( and .(\n            } else if (last_type !== 'TK_WORD' && last_type !== 'TK_OPERATOR') {\n                print_single_space();\n            } else if (last_word === 'function' || last_word === 'typeof') {\n                // function() vs function ()\n                if (opt_jslint_happy) {\n                    print_single_space();\n                }\n            } else if (in_array(last_text, line_starters) || last_text === 'catch') {\n                if (opt_space_before_conditional) {\n                    print_single_space();\n                }\n            }\n            print_token();\n\n            break;\n\n        case 'TK_DOT':\n\n            if (is_special_word(last_text)) {\n                print_single_space();\n            } else if (last_text === ')') {\n                if (opt_break_chained_methods || wanted_newline) {\n                    flags.chain_extra_indentation = 1;\n                    print_newline(true /* ignore_repeated */, false /* reset_statement_flags */);\n                }\n            }\n\n            print_token();\n            break;\n\n        case 'TK_END_EXPR':\n            if (token_text === ']') {\n                if (opt_keep_array_indentation) {\n                    if (last_text === '}') {\n                        // trim_output();\n                        // print_newline(true);\n                        remove_indent();\n                        print_token();\n                        restore_mode();\n                        break;\n                    }\n                } else {\n                    if (flags.mode === '[INDENTED-EXPRESSION]') {\n                        if (last_text === ']') {\n                            restore_mode();\n                            print_newline();\n                            print_token();\n                            break;\n                        }\n                    }\n                }\n            }\n            restore_mode();\n            print_token();\n            break;\n\n        case 'TK_START_BLOCK':\n\n            if (last_word === 'do') {\n                set_mode('DO_BLOCK');\n            } else {\n                set_mode('BLOCK');\n            }\n            if (opt_brace_style === \"expand\" || opt_brace_style === \"expand-strict\") {\n                var empty_braces = false;\n                if (opt_brace_style === \"expand-strict\") {\n                    empty_braces = (look_up() === '}');\n                    if (!empty_braces) {\n                        print_newline(true);\n                    }\n                } else {\n                    if (last_type !== 'TK_OPERATOR') {\n                        if (last_text === '=' || (is_special_word(last_text) && last_text !== 'else')) {\n                            print_single_space();\n                        } else {\n                            print_newline(true);\n                        }\n                    }\n                }\n                print_token();\n                if (!empty_braces) {\n                    indent();\n                }\n            } else {\n                if (last_type !== 'TK_OPERATOR' && last_type !== 'TK_START_EXPR') {\n                    if (last_type === 'TK_START_BLOCK') {\n                        print_newline();\n                    } else {\n                        print_single_space();\n                    }\n                } else {\n                    // if TK_OPERATOR or TK_START_EXPR\n                    if (is_array(flags.previous_mode) && last_text === ',') {\n                        if (last_last_text === '}') {\n                            // }, { in array context\n                            print_single_space();\n                        } else {\n                            print_newline(); // [a, b, c, {\n                        }\n                    }\n                }\n                indent();\n                print_token();\n            }\n\n            break;\n\n        case 'TK_END_BLOCK':\n            restore_mode();\n            if (opt_brace_style === \"expand\" || opt_brace_style === \"expand-strict\") {\n                if (last_text !== '{') {\n                    print_newline();\n                }\n                print_token();\n            } else {\n                if (last_type === 'TK_START_BLOCK') {\n                    // nothing\n                    if (just_added_newline) {\n                        remove_indent();\n                    } else {\n                        // {}\n                        trim_output();\n                    }\n                } else {\n                    if (is_array(flags.mode) && opt_keep_array_indentation) {\n                        // we REALLY need a newline here, but newliner would skip that\n                        opt_keep_array_indentation = false;\n                        print_newline();\n                        opt_keep_array_indentation = true;\n\n                    } else {\n                        print_newline();\n                    }\n                }\n                print_token();\n            }\n            break;\n\n        case 'TK_WORD':\n\n            // no, it's not you. even I have problems understanding how this works\n            // and what does what.\n            if (do_block_just_closed) {\n                // do {} ## while ()\n                print_single_space();\n                print_token();\n                print_single_space();\n                do_block_just_closed = false;\n                break;\n            }\n\n            prefix = 'NONE';\n\n            if (token_text === 'function') {\n                if (flags.var_line && last_type !== 'TK_EQUALS' ) {\n                    flags.var_line_reindented = true;\n                }\n                if ((just_added_newline || last_text === ';') && last_text !== '{'\n                && last_type !== 'TK_BLOCK_COMMENT' && last_type !== 'TK_COMMENT') {\n                    // make sure there is a nice clean space of at least one blank line\n                    // before a new function definition\n                    n_newlines = just_added_newline ? n_newlines : 0;\n                    if (!opt_preserve_newlines) {\n                        n_newlines = 1;\n                    }\n\n                    for (var i = 0; i < 2 - n_newlines; i++) {\n                        print_newline(false);\n                    }\n                }\n                if (last_type === 'TK_WORD') {\n                    if (last_text === 'get' || last_text === 'set' || last_text === 'new' || last_text === 'return') {\n                        print_single_space();\n                    } else {\n                        print_newline();\n                    }\n                } else if (last_type === 'TK_OPERATOR' || last_text === '=') {\n                    // foo = function\n                    print_single_space();\n                } else if (is_expression(flags.mode)) {\n                    // print nothing\n                } else {\n                    print_newline();\n                }\n\n                print_token();\n                last_word = token_text;\n                break;\n            }\n\n            if (token_text === 'case' || (token_text === 'default' && flags.in_case_statement)) {\n                print_newline();\n                if (flags.case_body) {\n                    // switch cases following one another\n                    flags.indentation_level--;\n                    flags.case_body = false;\n                    remove_indent();\n                }\n                print_token();\n                flags.in_case = true;\n                flags.in_case_statement = true;\n                break;\n            }\n\n            if (last_type === 'TK_END_BLOCK') {\n\n                if (!in_array(token_text.toLowerCase(), ['else', 'catch', 'finally'])) {\n                    prefix = 'NEWLINE';\n                } else {\n                    if (opt_brace_style === \"expand\" || opt_brace_style === \"end-expand\" || opt_brace_style === \"expand-strict\") {\n                        prefix = 'NEWLINE';\n                    } else {\n                        prefix = 'SPACE';\n                        print_single_space();\n                    }\n                }\n            } else if (last_type === 'TK_SEMICOLON' && (flags.mode === 'BLOCK' || flags.mode === 'DO_BLOCK')) {\n                prefix = 'NEWLINE';\n            } else if (last_type === 'TK_SEMICOLON' && is_expression(flags.mode)) {\n                prefix = 'SPACE';\n            } else if (last_type === 'TK_STRING') {\n                prefix = 'NEWLINE';\n            } else if (last_type === 'TK_WORD') {\n                if (last_text === 'else') {\n                    // eat newlines between ...else *** some_op...\n                    // won't preserve extra newlines in this place (if any), but don't care that much\n                    trim_output(true);\n                }\n                prefix = 'SPACE';\n            } else if (last_type === 'TK_START_BLOCK') {\n                prefix = 'NEWLINE';\n            } else if (last_type === 'TK_END_EXPR') {\n                print_single_space();\n                prefix = 'NEWLINE';\n            }\n\n            if (in_array(token_text, line_starters) && last_text !== ')') {\n                if (last_text === 'else') {\n                    prefix = 'SPACE';\n                } else {\n                    prefix = 'NEWLINE';\n                }\n\n            }\n\n            if (flags.if_line && last_type === 'TK_END_EXPR') {\n                flags.if_line = false;\n            }\n            if (in_array(token_text.toLowerCase(), ['else', 'catch', 'finally'])) {\n                if (last_type !== 'TK_END_BLOCK' || opt_brace_style === \"expand\" || opt_brace_style === \"end-expand\" || opt_brace_style === \"expand-strict\") {\n                    print_newline();\n                } else {\n                    trim_output(true);\n                    print_single_space();\n                }\n            } else if (prefix === 'NEWLINE') {\n                if (is_special_word(last_text)) {\n                    // no newline between 'return nnn'\n                    print_single_space();\n                } else if (last_type !== 'TK_END_EXPR') {\n                    if ((last_type !== 'TK_START_EXPR' || token_text !== 'var') && last_text !== ':') {\n                        // no need to force newline on 'var': for (var x = 0...)\n                        if (token_text === 'if' && last_word === 'else' && last_text !== '{') {\n                            // no newline for } else if {\n                            print_single_space();\n                        } else {\n                            flags.var_line = false;\n                            flags.var_line_reindented = false;\n                            print_newline();\n                        }\n                    }\n                } else if (in_array(token_text, line_starters) && last_text !== ')') {\n                    flags.var_line = false;\n                    flags.var_line_reindented = false;\n                    print_newline();\n                }\n            } else if (is_array(flags.mode) && last_text === ',' && last_last_text === '}') {\n                print_newline(); // }, in lists get a newline treatment\n            } else if (prefix === 'SPACE') {\n                print_single_space();\n            }\n            print_token();\n            last_word = token_text;\n\n            if (token_text === 'var') {\n                flags.var_line = true;\n                flags.var_line_reindented = false;\n                flags.var_line_tainted = false;\n            }\n\n            if (token_text === 'if') {\n                flags.if_line = true;\n            }\n            if (token_text === 'else') {\n                flags.if_line = false;\n            }\n\n            break;\n\n        case 'TK_SEMICOLON':\n\n            print_token();\n            flags.var_line = false;\n            flags.var_line_reindented = false;\n            if (flags.mode === 'OBJECT') {\n                // OBJECT mode is weird and doesn't get reset too well.\n                flags.mode = 'BLOCK';\n            }\n            break;\n\n        case 'TK_STRING':\n\n            if (last_type === 'TK_END_EXPR' && in_array(flags.previous_mode, ['(COND-EXPRESSION)', '(FOR-EXPRESSION)'])) {\n                print_single_space();\n            } else if (last_type === 'TK_COMMENT' || last_type === 'TK_STRING' || last_type === 'TK_START_BLOCK' || last_type === 'TK_END_BLOCK' || last_type === 'TK_SEMICOLON') {\n                print_newline();\n            } else if (last_type === 'TK_WORD') {\n                print_single_space();\n            } else {\n                if (opt_preserve_newlines && wanted_newline && flags.mode !== 'OBJECT') {\n                    print_newline();\n                    output.push(indent_string);\n                }\n            }\n            print_token();\n            break;\n\n        case 'TK_EQUALS':\n            if (flags.var_line) {\n                // just got an '=' in a var-line, different formatting/line-breaking, etc will now be done\n                flags.var_line_tainted = true;\n            }\n            print_single_space();\n            print_token();\n            print_single_space();\n            break;\n\n        case 'TK_COMMA':\n            if (flags.var_line) {\n                if (is_expression(flags.mode) || last_type === 'TK_END_BLOCK' ) {\n                    // do not break on comma, for(var a = 1, b = 2)\n                    flags.var_line_tainted = false;\n                }\n                if (flags.var_line_tainted) {\n                    print_token();\n                    flags.var_line_reindented = true;\n                    flags.var_line_tainted = false;\n                    print_newline();\n                    break;\n                } else {\n                    flags.var_line_tainted = false;\n                }\n\n                print_token();\n                print_single_space();\n                break;\n            }\n\n            if (last_type === 'TK_COMMENT') {\n                print_newline();\n            }\n\n            if (last_type === 'TK_END_BLOCK' && flags.mode !== \"(EXPRESSION)\") {\n                print_token();\n                if (flags.mode === 'OBJECT' && last_text === '}') {\n                    print_newline();\n                } else {\n                    print_single_space();\n                }\n            } else {\n                if (flags.mode === 'OBJECT') {\n                    print_token();\n                    print_newline();\n                } else {\n                    // EXPR or DO_BLOCK\n                    print_token();\n                    print_single_space();\n                }\n            }\n            break;\n\n\n        case 'TK_OPERATOR':\n\n            var space_before = true;\n            var space_after = true;\n            if (is_special_word(last_text)) {\n                // \"return\" had a special handling in TK_WORD. Now we need to return the favor\n                print_single_space();\n                print_token();\n                break;\n            }\n\n            // hack for actionscript's import .*;\n            if (token_text === '*' && last_type === 'TK_DOT' && !last_last_text.match(/^\\d+$/)) {\n                print_token();\n                break;\n            }\n\n            if (token_text === ':' && flags.in_case) {\n                flags.case_body = true;\n                indent();\n                print_token();\n                print_newline();\n                flags.in_case = false;\n                break;\n            }\n\n            if (token_text === '::') {\n                // no spaces around exotic namespacing syntax operator\n                print_token();\n                break;\n            }\n\n            if (in_array(token_text, ['--', '++', '!']) || (in_array(token_text, ['-', '+']) && (in_array(last_type, ['TK_START_BLOCK', 'TK_START_EXPR', 'TK_EQUALS', 'TK_OPERATOR']) || in_array(last_text, line_starters) || last_text == ','))) {\n                // unary operators (and binary +/- pretending to be unary) special cases\n\n                space_before = false;\n                space_after = false;\n\n                if (last_text === ';' && is_expression(flags.mode)) {\n                    // for (;; ++i)\n                    //        ^^^\n                    space_before = true;\n                }\n                if (last_type === 'TK_WORD' && in_array(last_text, line_starters)) {\n                    space_before = true;\n                }\n\n                if (flags.mode === 'BLOCK' && (last_text === '{' || last_text === ';')) {\n                    // { foo; --i }\n                    // foo(); --bar;\n                    print_newline();\n                }\n            } else if (token_text === ':') {\n                if (flags.ternary_depth === 0) {\n                    if (flags.mode === 'BLOCK') {\n                        flags.mode = 'OBJECT';\n                    }\n                    space_before = false;\n                } else {\n                    flags.ternary_depth -= 1;\n                }\n            } else if (token_text === '?') {\n                flags.ternary_depth += 1;\n            }\n            if (space_before) {\n                print_single_space();\n            }\n\n            print_token();\n\n            if (space_after) {\n                print_single_space();\n            }\n\n            break;\n\n        case 'TK_BLOCK_COMMENT':\n\n            var lines = split_newlines(token_text);\n            var j; // iterator for this case\n\n            if (all_lines_start_with(lines.slice(1), '*')) {\n                // javadoc: reformat and reindent\n                print_newline();\n                output.push(lines[0]);\n                for (j = 1; j < lines.length; j++) {\n                    print_newline();\n                    output.push(' ');\n                    output.push(trim(lines[j]));\n                }\n\n            } else {\n\n                // simple block comment: leave intact\n                if (lines.length > 1) {\n                    // multiline comment block starts with a new line\n                    print_newline();\n                } else {\n                    // single-line /* comment */ stays where it is\n                    if (last_type === 'TK_END_BLOCK') {\n                        print_newline();\n                    } else {\n                        print_single_space();\n                    }\n\n                }\n\n                for (j = 0; j < lines.length; j++) {\n                    output.push(lines[j]);\n                    output.push(\"\\n\");\n                }\n\n            }\n            if (look_up('\\n') !== '\\n') {\n                print_newline();\n            }\n            break;\n\n        case 'TK_INLINE_COMMENT':\n            print_single_space();\n            print_token();\n            if (is_expression(flags.mode)) {\n                print_single_space();\n            } else {\n                force_newline();\n            }\n            break;\n\n        case 'TK_COMMENT':\n\n            if (last_text === ',' && !wanted_newline) {\n                trim_output(true);\n            }\n            if (last_type !== 'TK_COMMENT') {\n                if (wanted_newline) {\n                    print_newline();\n                } else {\n                    print_single_space();\n                }\n            }\n            print_token();\n            print_newline();\n            break;\n\n        case 'TK_UNKNOWN':\n            print_token();\n            break;\n        }\n\n        last_last_text = last_text;\n        last_type = token_type;\n        last_text = token_text;\n    }\n\n    var sweet_code = preindent_string + output.join('').replace(/[\\r\\n ]+$/, '');\n    return sweet_code;\n\n}\n\n// Add support for CommonJS. Just put this file somewhere on your require.paths\n// and you will be able to `var js_beautify = require(\"beautify\").js_beautify`.\nif (typeof exports !== \"undefined\") {\n    exports.js_beautify = js_beautify;\n}\n","/home/travis/build/npmtest/node-npmtest-clam/node_modules/clam/lib/hosts.js":"var isUtf8 = require('is-utf8');\nvar debug = require('debug')('hosts');\nvar fs = require('fs');\nvar util = require('util');\nvar _ = require('underscore');\n\n/*\n * host文件中clam管理的区块\n */\nvar beginTag = '################ clam config start ################';\nvar endTag = '################ clam config end ################';\n/*\n * 读写 HOSTS 文件,获取换行符格式\n */\nvar hostFile = (function () {\n    var isWin = !!process.platform.match(/^win/);\n    var split_char = isWin ? '\\r\\n' : '\\n';\n    var charset ;\n    var get_file = function () {\n        var file_path;\n        if (isWin) {\n            file_path = 'c:\\\\windows\\\\system32\\\\drivers\\\\etc\\\\hosts';\n        } else {\n            file_path = '/etc/hosts';\n        }\n        if (fs.existsSync(file_path)) {\n            return file_path;\n        } else {\n            return false;\n        }\n    };\n    charset = isUtf8(fs.readFileSync(get_file())) ? 'utf-8' : 'gbk';\n    return {\n        get       : function () {\n            return fs.readFileSync(get_file(), charset);\n        },\n        set       : function (str) {\n            if (isWin) {\n                str = str.replace(/([^\\r])\\n/g, \"$1\\r\\n\");\n            }\n            debug(get_file());\n            fs.writeFileSync(get_file(), str, charset);\n        },\n        split_char: split_char\n    }\n})();\n\nvar NodeHostManager = (function () {\n    var split_char = hostFile.split_char;\n    return  (function () {\n        try{\n            var ip_regx = /^((1?\\d?\\d|(2([0-4]\\d|5[0-5])))\\.){3}(1?\\d?\\d|(2([0-4]\\d|5[0-5])))$/;\n            // copy from http://forums.intermapper.com/viewtopic.php?t=452\n            var ip6_regx = /^((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:)))(%.+)?$/;\n\n            var lines = [];\n            var hosts = {};\n\n            var cur_host_content = \"\";\n\n            var parse_host = function () {\n\n                lines = [];\n                hosts = {};\n                //read\n                var host = hostFile.get();\n                var areaReg = new RegExp(beginTag+'[\\\\s\\\\S]*?'+endTag+'\\\\n\\\\r?', 'g');\n                host = host.replace(areaReg, '');\n                cur_host_content = host;\n\n                if (host && host.charAt(host.length - 1) != \"\\n\") { //fix no lf\n                    host += split_char;\n                }\n\n                var l_p = 0; //pointer to line\n                var regx = /(.*?)\\r?\\n/mg;\n\n                while (true) {\n                    var l = regx.exec(host);\n                    if (!l) {\n                        break;\n                    }\n                    l = l[0];\n\n                    lines[l_p++] = l;\n\n                    l = l.replace(/^(\\s*#)+/, \"#\");\n                    l = l.replace(/#/g, \" # \");\n                    l = l.replace(/^\\s+|\\s+$/g, \"\");\n                    l = l.replace(/\\s+/g, \" \");\n                    var tks = l.split(\" \");\n                    var ip;\n                    if (ip_regx.test(tks[0]) || ip6_regx.test(tks[0])) {\n                        ip = tks[0];\n                        tks.splice(0, 1);\n                        tks.forEach(function (item,i){\n                            if (!hosts[item]) {\n                                hosts[item] = {\n                                    ip     : ip,\n                                    line_no: l_p\n                                }\n                            }\n                        });\n                    }\n                }\n            };\n            parse_host();\n            var line_disable = function (host_name) {\n                if (hosts[host_name]) {\n                    lines[hosts[host_name].line_no - 1] = '# ' + lines[hosts[host_name].line_no-1]\n                }\n            };\n            /**\n             * 设置项目HOST\n             * @param pro_hosts {array} example: ['127.0.0.1 farm1.staticflickr.com  a.tbcdn.cn', '127.0.0.1 kezhan.trip.taobao.com bb.aa.com']\n             */\n            var set_project_host = function (pro_hosts) {\n                if(_.isString(pro_hosts)){\n                    pro_hosts = pro_hosts.split(/\\n\\r?/);\n                }\n                parse_host();\n                lines.push(beginTag + split_char);\n                pro_hosts.forEach(function (item, i) {\n                    var ip ;\n                    item = item.replace(/^\\s+|\\s+$/g, '');\n                    item = item.replace(/\\s+/g, ' ');\n                    item = item.split(' ');\n                    if (ip_regx.test(item[0]) || ip6_regx.test[item[0]]) {\n                        ip = item[0];\n                        item.splice(0,1);\n                        item.forEach(function (_name, _i) {\n                            line_disable(_name);\n                        });\n                        lines.push(ip + ' ' + item.join(' ') + split_char);\n                    }\n                });\n                lines.push(endTag + split_char);\n\n                hostFile.set(lines.join(''));\n            };\n\n            /**\n             * 恢复HOST并存储\n             */\n            var restore = function () {\n                var host = hostFile.get();\n                var areaReg = new RegExp(beginTag+'[\\\\s\\\\S]*?'+endTag+'\\\\r?\\\\n?', 'g');\n                host = host.replace(areaReg, '');\n                hostFile.set(host);\n            };\n            return {\n                setHosts : set_project_host,//设置项目HOST\n                restore  : restore //恢复原始HOST配置\n            };\n        }catch(e){\n            return {\n                setHosts : function(){},//设置项目HOST\n                restore  : function(){} //恢复原始HOST配置\n            };\n        }\n\n    })();\n})();\n\n//test\n//NodeHostManager.restore();\nexports = module.exports = NodeHostManager;","/home/travis/build/npmtest/node-npmtest-clam/node_modules/clam/lib/template.js":"var path = require('path');\nvar fs = require('fs');\nvar mkdirp = require('mkdirp');\nvar isUtf8 = require('is-utf8');\nvar debug = require('debug')('template');\nvar J = require(\"juicer\");\nvar iconv = require('iconv-lite');\nvar config = require('./config.js');\n\nfunction init(){\n    var userHome = process.env.HOME || process.env.HOMEPATH;//兼容windows\n    var cacheDir = path.join(userHome, '.clamconfig/templates/default');\n    if(fs.existsSync(cacheDir)){\n        return;\n    }\n    mkdirp.sync(cacheDir);\n    var sourceRoot = path.join(__dirname,'../resource');\n    function copyFn(file){\n        debug('复制默认模板文件%s', path.basename(file));\n        var dir = path.dirname(file);\n        var relative = path.relative(sourceRoot, dir);\n        var destDir = path.join(cacheDir, relative);\n        mkdirp.sync(destDir);\n        var srcFile = fs.readFileSync(file);\n        var destFilePath = path.join(destDir, path.basename(file));\n        fs.writeFileSync(destFilePath, srcFile);\n    }\n    eachFile(sourceRoot, copyFn);\n}\n\n/**\n * 转换源模板目录到目标目录\n *   1.遍历所有源目录的文件，并用模板引擎处理\n *   2.如果源目录有主文件名为\"template\"的，就改为destName\n *   3.复制到目标目录\n * @param src     源目录\n * @param dest    目标目录\n * @param param   模板所需参数\n * @param destName  创建的目标文件名称\n */\nfunction convert(src, dest, param, destName){\n    eachFile(src, function(file){\n        var tmplContent = fs.readFileSync(file);\n\n        //探测并转换文本内容编码\n        var utf8 = isUtf8(tmplContent);\n        if (utf8) {\n            tmplContent = tmplContent.toString();\n        }\n        else {\n            tmplContent = iconv.decode(tmplContent, 'gbk');\n        }\n\n        //模板处理引擎\n        var pageContent = J(tmplContent, param);\n\n        //复制到destDir并且处理编码问题\n        var dir = path.dirname(file);\n        var relative = path.relative(src, dir);\n        var destDir = path.join(dest, relative);\n        mkdirp.sync(destDir);\n        destName = path.basename(destName);\n        var destFilePath = path.basename(file).replace(/template(\\..*)/, destName+'$1');\n        destFilePath = path.join(destDir, destFilePath);\n        var c = iconv.encode(pageContent,config.get('project').charset[0]);\n        fs.writeFileSync(destFilePath, c);\n        fs.chmodSync(destFilePath, \"777\");\n    });\n}\n\n/**\n * 递归便利目录，调用回调函数\n * @param dir 目录\n * @param fn  回调函数\n */\nfunction eachFile(dir, fn){\n    var files = fs.readdirSync(dir);\n    files.forEach(function(file){\n        var pathname = path.join(dir, file);\n        var stat = fs.lstatSync(pathname);\n\n        if (stat.isDirectory()){\n            eachFile(pathname, fn);\n            return;\n        }\n        fn(pathname);\n    });\n}\n\nexports.init = init;\nexports.convert = convert;","/home/travis/build/npmtest/node-npmtest-clam/node_modules/clam/lib/mod.js":"var prj = require('./project.js');\nvar fs = require('fs');\nvar path = require('path');\nvar walk = require('./util/walk.js');\nvar _ = require('underscore');\nvar J = require(\"juicer\");\nvar conf = require('./config.js');\nvar debug = require('debug')('clam:mod');\nvar templateCenter = require('./template.js');\nvar mkdirp = require('mkdirp');\nvar iconv = require('iconv-lite');\n\nvar config = {\n    metaDir: '.clam',\n    metaFile : 'mod.json',\n    suffix : ['vm', 'php', 'html'],\n    templateDir : \"../resource/mod/\",\n    assetsDir : \"assets\",\n    coreName : \"core\",\n    coreTemplate:\"../resource/mod/core\",\n    headTemplate:\"../resource/mod/head\"\n};\nvar appDir = path.resolve(__dirname);\n\nJ.set(\"strip\", false);\n/**\n * 返回modsDir中所有的模块，递归的，返回所有子目录的模块。\n * 模块以config.suffix中所标识的扩展名结束\n * 如果，目录结构如下：\n *  mods/a/a.vm\n *  mods/a/b/b.vm\n *\n * 应该解析2个模块，分别叫做a/a.vm 和 a/b/b.vm 每一个.vm都是一个模块\n * 每个.vm应对应一个同名.css及.js文件，不强制要求有css和js文件。\n * 限定模块的css和js文件必须小余一定规模，比如500行。这么做的目的是为了鼓励拆分模块中复杂逻辑到widget中。\n *\n * 返回的模块名在.clam/mods.json中有额外信息记录。比如description。\n */\nexports.list = function() {\n    var prjInfo = prj();\n\n    var modsDir = path.join(conf.root(), prjInfo.modsDir);\n    var metaFile = path.join(conf.root(), config.metaDir, config.metaFile);\n    var modsFiles = walk.walkSync(modsDir);\n    modsFiles = _.filter(modsFiles, function(file) {\n        return _.any(config.suffix, function(value) {\n            // 改为直接用后缀名判断，防止.vm.swp 这类文件混入\n            var fileSuffix = file.match(/.*\\/.*\\.(\\w+)$/)[1];\n            return fileSuffix == value;\n        });\n    });\n    //console.log(modsFiles);\n    //conf.root() + prjInfo.dir\n    var metaInfo = conf.get('mod');\n\n    var info = _.map(modsFiles, function(file) {\n        var fileName = file.slice(modsDir.length+1, file.length);\n        var modName = file.slice(modsDir.length+1, file.lastIndexOf('.'));\n        var description = '';\n        if(metaInfo){\n            description = metaInfo[modName] ? metaInfo[modName].description : '';\n        }\n\n        return {\n            name : modName,\n            file : fileName,\n            description : description\n        };\n    });\n    return {succeed:true,\n        msg:'获取模块信息',\n        data:info\n    };\n}\n\n/**\n * 创建模块，就是创建一个文件夹，及模块下对应的文件。\n * 1、模块一定存在于一个包中，不能直接放置到mods目录下\n * 2、默认情况下，模块被创建一个同名目录中。\n * 3、可以创建子模块。\n *\n * 创建的模块如果有额外信息，需要记录到.clam/mods.json中\n * 创建的模块，需要有额外注释，描述模块名。\n *\n * 未来，创建模块时，可以选择基于某模板创建，比如活动页面的模块。\n */\nvar addMod = exports.add = function(modName, description, template) {\n    var prjInfo = prj();\n    var actions = [];\n    \n    //只支持几种扩展名，并且默认一个模块必须在子目录中\n    var modFileName = computeExt(modName);\n    if(modFileName.split('/').length === 1){\n        var modNameSet = modFileName.replace(/\\..*$/, '');\n        modFileName = modNameSet + '/' + modFileName;\n    }\n    debug(modFileName);\n    //如果存在相同模块报错\n    var modFilePath = path.join(conf.root(), prjInfo.modsDir, modFileName);\n    if (fs.existsSync(modFilePath)) {\n        return {\n            succeed: false,\n            msg: '已存在相同的模块，创建模块失败。',\n            data: modFilePath\n        };;\n    }\n\n    //创建模块HTML文件目录\n    var modDir = path.join(modFilePath, '..');\n    mkdirp.sync(modDir);\n\n    //修改目录权限为775\n    var modDepsdirs = modFileName.split('/');\n    var dir = '', j = 0;\n    for(var i = 0; i < modDepsdirs.length-1; i++){\n        dir = path.join(conf.root(), prjInfo.modsDir);\n        j = 0;\n        while(j <= i ){\n            dir = path.join(dir, modDepsdirs[j]);\n            j++;\n        }\n        debug('修改目录权限%s', dir);\n        fs.chmodSync(dir,'775');\n    }\n\n    //取得模板路径\n    if(!template){\n        template = 'default';\n    }\n    var userHome = process.env.HOME || process.env.HOMEPATH;//兼容windows\n    var templateDir = path.join(userHome, '.clamconfig/templates', template,'mod');\n    if(!fs.existsSync(templateDir)){\n        return {\n            succeed: false,\n            msg: '模板'+template+'不存在',\n            data: ''\n        };\n    }\n\n    //转换模板\n    var bn = modDepsdirs[modDepsdirs.length-1];\n    var baseModName = path.basename(bn, path.extname(bn));\n    var modInfo = {\n        name: baseModName,\n        description: description\n    };\n    var param = {project: prjInfo, mod: modInfo};\n    templateCenter.convert(templateDir, modDir, param, baseModName);\n\n    //记录模块元信息\n    var metaInfo = conf.get('mod');\n    if(!metaInfo){\n        metaInfo = {};\n    }\n\n    metaInfo[modFileName.replace(/\\.(html)$/,'')] = modInfo;\n    conf.set('mod', metaInfo);\n    actions.push({action:'更新模块元信息', content: '.clam/mod.json'});\n\n    //完成创建后执行回调\n    return {\n        succeed: true,\n        msg: '模块创建',\n        data: actions\n    };\n}\n\n/**\n * 删除模块\n */\nexports.del = function (data) {\n    var prjInfo = prj();\n    var dirName = path.dirname(data.name);\n    var fileName = path.basename(data.name);\n    var modDir = path.join(conf.root(), prjInfo.modsDir, dirName);\n    var modPath = path.join(conf.root(), prjInfo.modsDir, dirName, fileName+'.'+prjInfo.pageext[0]);\n    var actions = [];\n    if(!fs.existsSync(modPath)){\n        return {\n            succeed:false,\n            msg:modPath+\"文件不存在\"\n        }\n    }\n    //删除页面文件\n    fs.unlinkSync(modPath);\n    actions.push({action:'删除文件', content: modPath});\n    //检查该文件夹下是否还有文件，如果没有的话就删掉\n    var list = fs.readdirSync(modDir);\n    list = _.filter(list,function(file){\n        return _.any(config.suffix, function(value) {\n            return file.lastIndexOf(value) !== -1;\n        });\n    });\n    if(list.length==0){\n        walk.rmrfSync(modDir);\n        actions.push({action:'删除文件目录', content: modDir});\n    }\n    return {succeed:true,\n        msg:'删除页面',\n        data:actions\n    };\n    \n}\n\n/**\n * 创建core模块\n */\nexports.addCore = function(){\n    var prjInfo = prj();\n    var name = config.coreName;\n    //添加核心模块\n    addMod({\n        name:name,\n        description:\"项目核心模块，包含一些不依赖任何库的JS方法和页头页尾等通用模块\",\n        addjs:true,\n        addcss:true,\n        jsns:prjInfo.jsns\n    },{\n        templateDir : config.coreTemplate\n    });\n    //添加头<head>内容模块\n    addMod({\n        name:name+\"/head\",\n        description:\"项目页面head标签部分内容\",\n        addjs:false,\n        addcss:false\n    },{\n        templateDir : config.headTemplate\n    });\n}\n\n//设置模块文件的扩展名，如果不是以下列表的，就改为.vm\nfunction computeExt(str) {\n    var prjInfo = prj();\n    if ((/\\.(vm|php|html|htm)$/).test(str)) {\n        return str;\n    }\n    return str.replace(/\\..*$/, \"\") + '.' + prjInfo.pageext[0];\n}\n/*\nfunction writeFile(path,str){\n    var prjInfo = prj();\n    var c = iconv.encode(str,prjInfo.charset[0]);\n    fs.writeFileSync(path, c);\n    fs.chmodSync(path, \"777\");\n}*/\n","/home/travis/build/npmtest/node-npmtest-clam/node_modules/clam/lib/util/walk.js":"var fs = require('fs');\nvar path = require(\"path\");\nvar walk = function(dir, done) {\n    var results = [];\n    fs.readdir(dir, function(err, list) {\n        if (err) return done(err);\n        var pending = list.length;\n        if (!pending) return done(null, results);\n        list.forEach(function(file) {\n            file = dir + '/' + file;\n            fs.stat(file, function(err, stat) {\n                if (stat && stat.isDirectory()) {\n                    walk(file, function(err, res) {\n                        results = results.concat(res);\n                        if (!--pending) done(null, results);\n                    });\n                } else {\n                    results.push(file);\n                    if (!--pending) done(null, results);\n                }\n            });\n        });\n    });\n};\n\nvar walkSync = function(dir){\n    var results = [];\n    var list = fs.readdirSync(dir);\n\n    list.forEach(function(file) {\n        file = (dir + '/' + file).replace(/\\\\/g, '/');\n        var stat = fs.statSync(file);\n            if (stat && stat.isDirectory()) {\n                results = results.concat(walkSync(file));\n            } else {\n                results.push(file);\n            }\n    });\n    return results;\n}\n\n\nfunction rmrf(dir, callback) {\n    fs.stat(dir, function(err, stats) {\n        if (err) {\n            return callback(err);\n        }\n\n        if (!stats.isDirectory()) {\n            return fs.unlink(dir, callback);\n        }\n\n        var count = 0;\n        fs.readdir(dir, function(err, files) {\n            if (err) {\n                return callback(err);\n            }\n\n            if (files.length < 1) {\n                return fs.rmdir(dir, callback);\n            }\n\n            files.forEach(function(file) {\n                var sub = path.join(dir, file);\n\n                rmrf(sub, function(err) {\n                    if (err) {\n                        return callback(err);\n                    }\n\n                    if (++count == files.length) {\n                        fs.rmdir(dir, callback);\n                    }\n                });\n            });\n        });\n    });\n}\n\nfunction rmrfSync(dir) {\n    var stats = fs.statSync(dir);\n    if (!stats.isDirectory()) {\n        return fs.unlinkSync(dir);\n    }\n    var count = 0;\n    var files = fs.readdirSync(dir);\n    if (files.length < 1) {\n        return fs.rmdirSync(dir);\n    }\n    \n    files.forEach(function(file) {\n        var sub = path.join(dir, file);\n        \n        rmrfSync(sub);\n        if (++count == files.length) {\n            fs.rmdirSync(dir);\n        }\n    });\n}\n\n\nexports.walk = walk;\nexports.walkSync = walkSync;\nexports.rmrf = rmrf;\nexports.rmrfSync = rmrfSync;","/home/travis/build/npmtest/node-npmtest-clam/node_modules/clam/lib/page.js":"var fs = require('fs');\nvar path = require('path');\nvar mkdirp = require('mkdirp');\nvar J = require(\"juicer\");\nvar walk = require('./util/walk.js');\nvar _ = require('underscore');\nvar iconv = require('iconv-lite');\nvar conf = require('./config.js');\nvar util = require('util');\nvar debug = require('debug')('clam:page');\nvar templateCenter = require('./template.js');\n\nvar config = {\n    metaDir: '.clam',\n    suffix:['vm', 'php' , 'html'],\n    metaFile:'page.json',\n    templateDir:\"../resource/page\",\n    template:'template.html'\n};\n\nJ.set(\"strip\", false);\n/**\n * 返回pages目录中的page,pageDir目录中的page需要递归获取。\n *\n * 如目录结果如下：\n * tuipiao/index.html\n * tuipiao/xxxReason/suceed.html\n * tuipiao/xxxReason/suceed.html\n * 应该返回三个页面，分别为这三个页面的全路经。\n *\n * 根据每个返回页面名获取页面额外信息，如：上线后URL\n * 每个页面可以默认有一个同名js、css文件。\n *\n * page [js/css/img/header]\n * mod  [js/css/img]\n * widget\n *\n */\nexports.list = function () {\n    var prjInfo = conf.get('project');\n    var root = conf.root();\n    var pageDir = path.join(root, 'src');\n    var metaFile = path.join(root, config.metaDir, config.metaFile);\n    var pageFiles = walk.walkSync(pageDir);\n\n    //过滤掉非html文件\n    var filter_page = new RegExp(path.join(root, prjInfo.pagesDir).replace(/\\\\/g, '/')+\".+\\\\.html$\"),\n        filter_root = new RegExp(path.join(root, prjInfo.pagesDir+\"/..\").replace(/\\\\/g, '/')+\"/([^\\/]*?)\\\\.html$\");\n    pageFiles = _.filter(pageFiles, function (file) {\n        if (file.match(filter_page)) {\n            return true;\n        }\n        else {\n            return file.match(filter_root) ? true : false;\n        }\n    });\n    debug('页面%s', util.inspect(pageFiles));\n    pageFiles = pageFiles.sort(function (a, b) {\n        return a < b;\n    });\n    var metaInfo = conf.get('page');\n    var info = _.map(pageFiles, function (file) {\n        var pageName = file.slice(pageDir.length+1, file.lastIndexOf('.'));\n        var pageFileName = file.slice(pageDir.length+1, file.length);\n        var description = '';\n        var onlineurl = '';\n        var pagelib = '';\n        if(metaInfo){\n            description = metaInfo[pageName] ? metaInfo[pageName].description : '';\n            onlineurl = metaInfo[pageName] ? metaInfo[pageName].url : '';\n            pagelib = metaInfo[pageName] ? metaInfo[pageName].lib : '';\n        }\n\n        return {\n            name: pageName,\n            file: pageFileName,\n            description: description,\n            url: onlineurl,\n            lib: pagelib,\n            fileExt: 'html'\n        };\n    });\n    return {\n        succeed:true,\n        msg:'获取页面信息',\n        data:info\n    };\n}\n\n/**\n * 创建页面\n * 页面创建时要根据所选框架(jquery/yui/kissy)，按照模板生成页面。\n * info 格式如下：\n  {\n    \"url\":\"abcde/abc\",\n    \"name\":\"abab/ddd\",\n    \"description\":\"cdcd\",\n    \"lib\":[\"KISSY\", \"JQUERY\", \"YUI\"]\n   }\n */\nfunction add(name, url, description, template) {\n    var prjInfo = conf.get('project');\n    var root = conf.root();\n    var metaFile = path.join(root, config.metaDir, config.metaFile);\n    var actions = [];\n\n    var pageFileName = computeExt(name);\n    \n    /**\n     * 处理单页页面目录和多层页面目录结构，单层结构的都加上\n     */\n\n    var pagePath = path.join(root, prjInfo.pagesDir, pageFileName);\n    \n    if (fs.existsSync(pagePath)) {\n        return {succeed:false,\n            msg:'存在相同的页面，创建页面失败。',\n            data:pagePath\n        };\n    }\n    console.log(\"Creating page:\"+pagePath);\n\n    //创建模块HTML文件目录\n    var pageDir = path.join(pagePath, '..');\n    mkdirp.sync(pageDir);\n\n    //修改目录权限为775\n    var pageDepsdirs = pageFileName.split('/');\n    var dir = '', j=0;\n    for(var i = 0; i < pageDepsdirs.length-1; i++){\n        dir = path.join(conf.root(), prjInfo.pagesDir);\n        j   = 0;\n        while(j <= i ){\n            dir = path.join(dir, pageDepsdirs[j]);\n            j++;\n        }\n        debug('修改目录权限%s', dir);\n        fs.chmodSync(dir,'775');\n    }\n\n    //取得模板路径\n    if(!template){\n        template = 'default';\n    }\n    var userHome = process.env.HOME || process.env.HOMEPATH;//兼容windows\n    var templateDir = path.join(userHome, '.clamconfig/templates', template,'page');\n    if(!fs.existsSync(templateDir)){\n        return {\n            succeed: false,\n            msg: '模板'+template+'不存在',\n            data: ''\n        };\n    }\n\n    //转换模板\n    var bn = pageDepsdirs[pageDepsdirs.length-1];\n    var pageName = path.basename(bn, path.extname(bn));\n    var pageInfo = {\n        name: pageName,\n        url: url,\n        description: description\n    };\n    debug('变量信息:%s', util.inspect(pageInfo));\n    var param = {project: prjInfo, page: pageInfo};\n    templateCenter.convert(templateDir, pageDir, param, pageName);\n\n    actions.push({action:'创建页面', content: pagePath});\n\n    //记录page元信息\n    var metaInfo = conf.get('page');\n    if(!metaInfo){\n        metaInfo = {};\n    }\n\n    metaInfo[pageFileName.replace(/\\.(html)$/,'')] = pageInfo;\n    conf.set('page', metaInfo);\n    actions.push({action:'更新页面元信息', content: metaFile});\n\n    return {\n        succeed: true,\n        msg: '创建页面',\n        data: actions\n    };\n}\n\nexports.add = add;\n\n/**\n * 修改页面对应的url\n */\nexports.update = function () {\n\n}\n\n/**\n * 删除页面\n */\nexports.del = function (data) {\n    var prjInfo = conf.get('project');\n    var root = conf.root();\n    var dirName = path.dirname(data.name);\n    var fileName = path.basename(data.name);\n    var pageDir = path.join(root, 'src', dirName);\n    var pagePath = path.join(root, 'src', dirName, fileName + '.html');\n    var actions = [];\n    //删除页面文件\n    fs.unlinkSync(pagePath);\n    actions.push({action:'删除页面文件', content: pagePath});\n    //检查该文件夹下是否还有文件，如果没有的话就删掉\n    var list = fs.readdirSync(pageDir);\n    if(list.length==0 && path.basename(pageDir) != path.basename('src')){\n        fs.rmdirSync(pageDir);\n        actions.push({action:'删除页面文件目录', content: pagePath});\n    }\n    return {succeed:true,\n        msg:'删除页面',\n        data:actions\n    };\n}\n\n//设置页面文件的扩展名，如果不是以下列表的，就改为.vm\nfunction computeExt(str) {\n    if ((/\\.(html)$/).test(str)) {\n        return str;\n    }\n    //return str.replace(/\\..*$/, \"\") + '.html';\n    return str + \".html\";\n}\n\n//获取页面信息\nfunction makePageParam(info) {\n    var cssBase, jsBase, data;\n    var prjInfo = conf.get('project');\n\n    var libPath = {\n        JQUERY:\"jquery\",\n        ZEPTO:\"zepto\",\n        KISSY:\"s/kissy/1.3.0rc/kissy-min.js\",\n        YUI:\"s/yui/3.5.1/build/yui/yui-min.js\",\n        SEAJS:\"seajs\"\n    };\n\n    //页面的lib为空的话则取项目的lib\n    var jsLib = (info.lib && info.lib.length) > 0 ? info.lib : prjInfo.lib;\n\n    //处理css reset路径\n    cssBase = \"http://a.tbcdn.cn/??p/global/1.0/global-min.css\";\n\n    //处理js库\n    jsBase = \"http://a.tbcdn.cn/??\";\n    _.each(jsLib, function (v, i) {\n        jsBase += libPath[v] + \",\"\n    });\n    jsBase = jsBase.slice(0, -1);\n    data = {\n        cssBase:cssBase,\n        jsBase:jsBase,\n        title:prjInfo.description,\n        description:info.description,\n        pageext: 'html',\n        charset: prjInfo.charset[0]\n    };\n    //console.log(JSON.stringify(data));\n    return data\n}\n/*\nfunction writeFile(path,str){\n    var prjInfo = conf.get('project');\n    var c = iconv.encode(str,prjInfo.charset[0]);\n    fs.writeFileSync(path, c);\n    fs.chmodSync(path, \"777\");\n}*/\n","/home/travis/build/npmtest/node-npmtest-clam/node_modules/clam/lib/widget.js":"var prj = require('./project.js');\nvar fs = require('fs');\nvar path = require('path');\nvar walk = require('./util/walk.js');\nvar _ = require('underscore');\nvar J = require(\"juicer\");\nvar conf = require('./config.js');\nvar templateCenter = require('./template.js');\nvar debug = require('debug')('widget');\n\nJ.set(\"strip\", false);\nvar mkdirp = require('mkdirp');\n\nvar config = {\n    metaDir: '.clam',\n    metaFile : 'widget.json',\n    templateDir : \"../resource/widget/\",\n    mainFile : 'index.js',\n    mainCss : 'style.css'\n};\n\n/**\n * 返回widgetDir中所有的组件，组件是平的，只有一级。\n * 组件根据目录名列出\n * 目录结构如下：\n *  widgets/a/index.js\n *  widgets/a/style.css\n * \n */\nexports.list = function() {\n    var prjInfo = prj();\n\n    var widgetsDir = path.join(conf.root(), prjInfo.widgetsDir);\n    var metaFile = path.join(conf.root(), config.metaDir, config.metaFile);\n    var widgets = fs.readdirSync(widgetsDir);\n    \n    //获取widgets目录下所有文件夹\n    widgets = _.filter(widgets, function(file) {\n        return fs.statSync(path.join(widgetsDir,file)).isDirectory()\n    });\n    \n    //console.log(widgets);\n    \n    \n    //获取组件元数据\n    var metaInfo = {};\n    try {\n        var metaStr = fs.readFileSync(metaFile);\n        metaInfo = JSON.parse(metaStr);\n    } catch(e) {\n        metaInfo = {};\n    }\n    \n    //console.log(metaInfo);\n    \n    //分析组件数据\n    var info = _.map(widgets, function(widgetName) {\n        var description = metaInfo[widgetName] ? metaInfo[widgetName].description : '';\n        return {\n            name : widgetName,\n            description : description\n        };\n    });\n    \n    \n    return {succeed:true,\n        msg:'获取模块信息',\n        data:info\n    };\n}\n\n\n/**\n * 创建组件，就是创建一个文件夹，及模块下对应的文件。\n * 组件目录结构是单层的，只要有一个文件夹以及主js文件，以及可选的样式文件即可\n *\n * 创建的组件如果有额外信息，需要记录到.clam/widget.json中\n * 创建的组件，需要有额外注释，描述组件名。\n * {\n *     name:\"\",\n *     description:\"\",\n *     addcss:true\n * }\n */\nexports.add = function(widgetName, description, template) {\n    var prjInfo = prj();\n    var actions = [];\n\n    //如果存在相同模块报错\n    var widgetDirPath = path.join(conf.root(), prjInfo.widgetsDir, widgetName);\n    if (fs.existsSync(widgetDirPath)) {\n        return {\n            succeed: false,\n            msg: '已存在相同的组件，创建模块失败。',\n            data: widgetDirPath\n        };\n    }\n\n    //创建模块HTML文件目录\n    mkdirp.sync(widgetDirPath);\n\n    //修改目录权限为775\n    var widgetDepsdirs = widgetName.split('/');\n    var dir = '', j = 0;\n    for(var i = 0; i < widgetDepsdirs.length-1; i++){\n        dir = path.join(conf.root(), prjInfo.widgetsDir);\n        j = 0;\n        while(j <= i ){\n            dir = path.join(dir, widgetDepsdirs[j]);\n            j++;\n        }\n        debug('修改目录权限%s', dir);\n        fs.chmodSync(dir,'775');\n    }\n\n    //取得模板路径\n    if(!template){\n        template = 'default';\n    }\n    var userHome = process.env.HOME || process.env.HOMEPATH;//兼容windows\n    var templateDir = path.join(userHome, '.clamconfig/templates', template, 'widget');\n    if(!fs.existsSync(templateDir)){\n        return {\n            succeed: false,\n            msg: '模板'+template+'不存在',\n            data: ''\n        };\n    }\n\n    //转换模板\n    var widgetBaseName = path.basename(widgetName);\n    var widgetInfo = {\n        name: widgetBaseName,\n        description: description\n    };\n    var param = {project: prjInfo, widget: widgetInfo};\n    templateCenter.convert(templateDir, widgetDirPath, param, widgetBaseName);\n\n    //记录模块元信息\n    var metaInfo = conf.get('widget');\n    if(!metaInfo){\n        metaInfo = {};\n    }\n\n    metaInfo[widgetName] = widgetInfo;\n    conf.set('widget', metaInfo);\n    \n    actions.push({action:'更新组件元信息', content: ''});\n    \n    //完成创建后执行回调\n    return {\n        succeed: true,\n        msg: '组件创建',\n        data: actions\n    };\n}\n\n/**\n * 删除组件\n */\nexports.del = function (data) {\n    var prjInfo = prj();\n    var dirName = data.name;\n    var widgetDir = path.join(conf.root(), prjInfo.widgetsDir, dirName);\n    var actions = [];\n    if(!fs.existsSync(widgetDir)){\n        return {\n            succeed:false,\n            msg:\"文件不存在\"\n        }\n    }\n    //检查该文件夹下是否还有文件，如果没有的话就删掉\n    walk.rmrfSync(widgetDir);\n    actions.push({action:'删除文件目录', content: widgetDir});\n\n    return {succeed:true,\n        msg:'删除组件',\n        data:actions\n    };\n    \n}\n/*\nfunction writeFile(path,str){\n    var prjInfo = prj();\n    var c = iconv.encode(str,prjInfo.charset[0]);\n    fs.writeFileSync(path, c);\n    fs.chmodSync(path, \"777\");\n}*/\n","/home/travis/build/npmtest/node-npmtest-clam/node_modules/clam/lib/assetsConfig.js":"var fs = require('fs');\nvar mkdirp = require('mkdirp');\nvar path = require('path');\nvar _ = require(\"underscore\");\nvar util = require('util');\nvar EventEmitter = require('events').EventEmitter;\nfunction readFromFile(file) {\n    if(!fs.existsSync(file)){\n        //console.log('config.json不存在，请执行tap buildcfg');\n        return {};\n    }\n    var metaStr = fs.readFileSync(file);\n    metaStr = metaStr.toString().replace(/[\\n\\r]/g, '');\n    return JSON.parse(metaStr);\n}\nvar fileName = path.join(process.cwd(),'/src/config.json');\nexports.config = readFromFile(fileName);\n","/home/travis/build/npmtest/node-npmtest-clam/node_modules/clam/lib/assetsTool.js":"var debug = require('debug')('clam:assetsTool');\nvar path = require('path');\nvar parser = require('./dependParser').parser;\nvar Map = require('./util/map');\n\n// 这行内容适合提取到配置文件中\nvar SEP = ':', CSS = 'css', JS = 'js', HEAD = 'head', FOOT = 'foot';\n\nvar exCss = /\\.css/gi;\nfunction getType(content) {\n    return content.match(exCss) ? CSS : JS;\n}\n\n// DOM渲染器\nvar renderer = {};\nrenderer[CSS] = function (url, pos) {\n    var str = '<link type=\"text/css\" rel=\"stylesheet\" href=\"' + url + '\" />';\n    //console.log(str); // TODO ...\n    return str;\n};\nrenderer[JS] = function (url, pos) {\n    var str = '<script src=\"' + url + '\" ></script>';\n    //console.log(str); // TODO ...\n    return str;\n};\n\n// $assetsTool API\nfunction AssetsTool() {\n    this.map = new Map();\n}\nAssetsTool.prototype.use = function (content) {\n    // css和js分离\n    var cssMod = [], jsMod = [];\n    var content = content || '';\n\n    content.split(',').forEach(function(m) {\n        var type = getType(m);\n        type == CSS ? cssMod.push(m): jsMod.push(m);\n    });\n\n    var urls = parser.getComboUrls(cssMod).concat(parser.getComboUrls(jsMod)),\n        type, ret = '';\n\n    if (typeof urls == 'string') urls = new Array(urls);\n\n    for (var i = 0, l = urls.length; i < l; i++) {\n        type = getType(urls[i]);\n        ret += renderer[type](urls[i]);\n    }\n    return ret;\n};\nAssetsTool.prototype.require = function (content, pos) {\n    var self = this;\n    content.split(',').forEach(function(m) {\n        var type = getType(m);\n\n        var mods = parser.getMods(m);\n\n        // 默认css放到头部，js放到底部\n        if (!pos) var pos = (type == CSS) ? HEAD : FOOT;\n\n        self.map.put(type + SEP + (pos || HEAD), mods);\n    });\n};\nAssetsTool.prototype.injectStyle = function () {\n    return this._inject(CSS, HEAD);\n};\nAssetsTool.prototype.injectScript = function (pos) {\n    return this._inject(JS, pos);\n};\nAssetsTool.prototype._inject = function (type, pos) {\n    var mods = this.map.get(type + SEP + pos),\n        urls = parser.getComboUrls(mods), ret = '';\n    for (var i = 0, l = urls.length; i < l; i++) {\n        ret += renderer[type](urls[i]);\n    }\n    return ret;\n};\nfunction feLoader(data) {\n    var cmd = [];\n    data.forEach(function(i){\n        cmd.push('{express:' + i['express'] + ', id:\"'+ i['id'] + '\"}');\n    })\n\n    cmd = 'var data = [' + cmd.join(',') + '], ret = [];'\n        + 'for (var i = 0, str; i < data.length; i++) {'\n        + '    str = data[i][\"express\"];'\n        + '    if (str) {'\n        + '        ret.push({'\n        + '            express: str,'\n        + '            id: data[i][\"id\"]'\n        + '        });'\n        + '    }'\n        + '}'\n        + 'return ret;';\n\n    var fn = new Function('$assetsTool', cmd);\n    return fn(new AssetsTool());\n}\nexports.feLoader = feLoader;\n\nexports.clearCacheMod = parser.clear;\n","/home/travis/build/npmtest/node-npmtest-clam/node_modules/clam/lib/dependParser.js":"/**\n * @fileOverview FeLoader - KISSY模块依赖关系解析器.\n *\n * @author zhuofeng.ls@tmall.com dafeng.xdf@taobao.com\n *\n */\nvar debug = require('debug')('clam:dependParser');\nvar config = require('./config.js');\nvar assetsConfig = require('./assetsConfig.js').config;\nvar path = require('path');\nvar _ = require('underscore');\n\nvar gconfig = config.get('gconfig');\n\nvar hasLoadMod = {};\n\n/**\n * config merge\n */\nif(assetsConfig !={}){\n    if(gconfig){\n        gconfig['modules'] = _.extend(gconfig['modules'], assetsConfig['modules']);\n        gconfig['packages'] = _.extend(gconfig['packages'], assetsConfig['packages']);\n    }else {\n        gconfig = assetsConfig;\n    }\n}\n\nvar modules = gconfig.modules,\n    packages = gconfig.packages;\n\nfunction getPackage(mod) {\n    if (!mod) return;\n\n    var pkg, max = 0, l;\n    for (var prop in packages) {\n        if (mod.indexOf(prop) === 0) {\n            l = prop.length;\n\n            // 贪婪式匹配\n            if (l > max) {\n                pkg = packages[prop];\n                pkg.name = prop; // 补充name字段\n\n                max = l;\n            }\n        }\n    }\n\n    // kissy的默认包的情况\n    if (!pkg) {\n        pkg = packages['default'];\n        pkg.name = 'default';\n    }\n\n    return pkg;\n}\n\nfunction recurse(mods, obj) {\n    var len;\n    if (!mods || !(len = mods.length))\n        return;\n\n    !obj && (obj = {});\n    for (var i = 0, mod, cfg; i < len; i++) {\n\n        mod = mods[i];\n\n        cfg = modules[mod] || {};\n\n        //recurse(cfg['requires'], obj);\n\n        var pkg = getPackage(mod),\n            path = cfg['path'];\n\n        if (pkg['ignorePackageNameInUri']) {\n            if (!path) {\n                path = mod.replace(pkg.name + '/', '') + (/\\S*.(css|js)/g.test(mod) ? '' : '.js') ;\n            }\n        } else {\n            if (!path) {\n                path = mod + (/\\S*.(css|js)/g.test(mod) ? '' : '.js');\n            }\n        }\n\n        obj[mod] = {\n            path: path, // TODO 1.需修正无path情况；2.修正basePath+path\n            pkg: pkg,\n            baseURI: pkg.path,\n            fullPath: pkg.path + path\n        }\n    }\n\n    return obj;\n}\n\n// 提取最长公共子串（Longest Common Substring）\nfunction getLCString(aStr, bStr) {\n    var len = aStr.length < bStr.length ? aStr.length : bStr.length,\n        max = -1;\n\n    for (var i = 0; i < len; i++) {\n        if (aStr.charAt(i) == bStr.charAt(i) && i - max == 1) {\n            max = i;\n        } else {\n            break;\n        }\n    }\n    return aStr.substring(0, max + 1);\n}\n\n// 生成Combo urls | 这行内容适合提取到配置文件中\nvar comboPrefix = '??', comboSep = ',', maxUrlLength = 1024, maxFileNum = 20;\nfunction getComboUrls(obj) {\n    var lCString = '', paths = [], path;\n\n    for (var k in obj) {\n        if (obj.hasOwnProperty(k) && !(k in hasLoadMod)) {\n            paths.push(path = obj[k].fullPath);\n\n            if (lCString) {\n                lCString = getLCString(path, lCString);\n            } else {\n                lCString = path;\n            }\n            hasLoadMod[k] = true;\n        }\n    }\n\n    var num, start = 0, url, comboUrls = [], baseURI = paths.length > 1 ? lCString + comboPrefix : lCString;\n\n    while (start < paths.length) {\n        num = maxFileNum;\n        do {\n            url = baseURI + paths.slice(start, num).join(comboSep).replace(new RegExp(lCString,'g'), ''); // TODO 时间戳...\n        } while ((url.length > maxUrlLength) && (num--));\n        comboUrls.push(url);\n        start = num;\n    }\n\n    return comboUrls;\n}\n\nvar parser = {\n    getComboUrls: function (content) {\n        var mods = this.getMods(content), len = mods.length;\n\n        if (!len)\n            return '';\n\n        var obj = recurse(mods); // 利用对象的KV特征自动去重\n        return getComboUrls(obj);\n    },\n\n    getMods: function (content) {\n        if (!content)\n            return [];\n        return content instanceof Array ?\n            content:\n            content.split(',');\n\n    },\n\n    clear: function() {\n        hasLoadMod = {};   // 页面刷新时需要清楚记录的模块\n    }\n};\n\nexports.parser = parser;\n","/home/travis/build/npmtest/node-npmtest-clam/node_modules/clam/lib/util/map.js":"/**\n * @fileOverview  FeLoader - Map\n *\n * @author zhuofeng.ls@tmall.com\n *\n * @Log\n *    - 2013.12.10 zhuofeng.ls\n *      1.[+] build this file.\n *\n */\n\n// Map容器\nfunction Map() {\n    if (!this instanceof Map) {\n        return new Map();\n    }\n    this._cache = {};\n}\nMap.prototype.put = function (key, value) {\n    (!this._cache[key]) && (this._cache[key] = []);\n\n    if (value instanceof Array) {\n        this._cache[key] = this._cache[key].concat(value);\n    } else {\n        this._cache[key].push(value); // 不做信息去重\n    }\n};\nMap.prototype.get = function (key) {\n    return this._cache[key] || [];\n};\n\nmodule.exports = Map;\n","/home/travis/build/npmtest/node-npmtest-clam/node_modules/clam/lib/assetUrl.js":"/**\n * Created with JetBrains WebStorm.\n * User: 陶清\n * Date: 13-11-1\n * Time: 下午4:05\n * Asset Url处理模块\n */\nvar debug = require('debug')('clam:assetUrl');\nvar config = require('./config.js');\nvar path = require('path');\nvar join = path.join;\nvar _ = require('underscore');\n\nvar scriptReg = /<script[^>]*? src\\s{0,}=\\s{0,}['\"]\\s{0,}(?!http(s)?:\\/\\/)(?!\\/)([^\"']*?)\\s{0,}['\"][^>]*?><\\\\?\\/script>/g;\nvar styleReg = /<link[^>]*? href\\s{0,}=\\s{0,}['\"]\\s{0,}(?!http(s)?:\\/\\/)(?!\\/)([^\"']*?)\\s{0,}['\"][^>]*?>/g;\nvar absScript = /<script[^>]*? src\\s{0,}=['\"]\\s{0,}(\\/.+?)\\s{0,}['\"][^>]*?><\\/script>/g;\nvar absStyle = /<link[^>]*? href\\s{0,}=\\s{0,}['\"]\\s{0,}(\\/.+?)\\s{0,}['\"][^>]*?>/g;\nvar cdnPathReg = /http[s]?:\\/\\/[\\w\\.]+[\\/.]*?/g;\n\n/**\n * 解析在工程文件中配置的被解析到127.0.0.1的本地域名\n * @returns {Array}\n */\nfunction localhosts(){\n    var strHosts = config.get('project').hosts;\n\n    var lines = strHosts.split(/[\\n\\r]{1,2}/);\n    var hosts = [];\n    lines.forEach(function(str){\n        var units = str.split(/\\s+/);\n        if(units[0] == '127.0.0.1'){\n            hosts = hosts.concat(units.slice(1,units.length));\n        }\n    });\n    hosts = _.union(hosts);\n    return hosts;\n}\n\n/**\n * 处理页面内容中的资源路径\n * 1. 本地相对路径转换为绝对路径\n * 2. 本地绝对路径增加端口号\n * 3. 以全cdnPath开头引入的格式资源，需要按照配置修改端口号，保证运行在非80端口上。\n *\n * @param pageContent  页面内容\n * @param urlDir       页面/模块文件相对根路径的位置\n * @return {String}    替换后的页面内容\n */\nfunction toAbsolutePath(pageContent, urlDir) {\n    var cdnPath = config.get('project').cdnPath;\n\n    //处理模块中资源引用\n    var localHosts = localhosts();\n    debug('本地host列表[%s]', localHosts);\n\n    /*/抽取cdn域名\n    var cdnHost = cdnPath.match(cdnPathReg);\n    if (cdnHost) {\n        cdnHost = cdnHost[0];\n    }\n    else {\n        cdnHost = '';\n    }*/\n\n    //以http开头的就改变cndPath中的端口号\n    var port = config.get('project').port;\n    var cdnPathWithPort = cdnPath;\n    if (cdnPath.indexOf('http') === 0) {\n        //如果是预览服务器运行在80端口，就不更改\n        if (!port || port == 80) {\n            port = '';\n        }\n        else {\n            port = ':' + port;\n        }\n        var matchResult = cdnPath.match(/(http:\\/\\/[\\w\\.]+?)(\\/.*)/);\n        if (matchResult) {\n            cdnPathWithPort = matchResult[1] + port + matchResult[2];\n        }\n    }\n\n    var resourceRootDir = '';\n    debug('资源跟路径%s', resourceRootDir);\n    //debug('处理前内容%s', pageContent);\n    //处理带域名的链接。1、增加端口号。2、增加时间戳路径\n    localHosts.forEach(function(localHost){\n        localHost = localHost.replace(/\\./g, '\\\\.');\n        var scriptWithDomain = new RegExp('<script[^>]*? src=[\\'\"](?:http[s]?:\\\\/\\\\/)(' + localHost + ')(.*)[\\'\"][^>]*?>', 'g');\n        pageContent = pageContent.replace(scriptWithDomain, function ($1, $2) {\n            return $1.replace($2, $2 + port);\n        });\n    });\n\n    localHosts.forEach(function(localHost){\n        localHost = localHost.replace(/\\./g, '\\\\.');\n        var styleWithDomain = new RegExp('<link[^>]*? href=[\\'\"](?:http[s]?:\\\\/\\\\/)(' + localHost + ')(.*)[\\'\"][^>]*?>', 'g');\n        pageContent = pageContent.replace(styleWithDomain, function ($1, $2) {\n            return $1.replace($2, $2 + port);\n        });\n    });\n    //替换资源相对路径应为带域名和端口号的绝对路径，根据当前页面所在相对路径转换\n    pageContent = pageContent.replace(scriptReg, function ($1, $2, $3) {\n        if ($3.match(/^\\$\\{/)) {\n            return $1;\n        }\n        else {\n            var replacedPath = join(resourceRootDir, urlDir, $3).replace(/\\\\/ig, '/');\n            if ($1.match(/clam-moveto/) && !$1.match(/clam-moveto\\s{0,}=\\s{0,}[\"']\\s{0,}head\\s{0,}[\"']/) && !$1.match(/clam-moveto\\s{0,}=\\s{0,}[\"']\\s{0,}tail\\s{0,}[\"']/)) {\n                replacedPath = \"$CLAM_VER$/\"+replacedPath;\n            }\n            return $1.replace($3, cdnPathWithPort + '/' + replacedPath).replace(/[\"'](\\s{0,})([^\"']*?)(\\s{0,})[\"']/g, function($1,$2,$3) {\n                return '\"'+$3+'\"';\n            });\n        }\n    });\n    pageContent = pageContent.replace(styleReg, function ($1, $2, $3) {\n        if ($3.match(/^\\$\\{/)) {\n            return $1;\n        }\n        else {\n            var replacedPath = join(resourceRootDir, urlDir, $3).replace(/\\\\/ig, '/');\n            if ($1.match(/clam-moveto/) && !$1.match(/clam-moveto\\s{0,}=\\s{0,}[\"']\\s{0,}head\\s{0,}[\"']/) && !$1.match(/clam-moveto\\s{0,}=\\s{0,}[\"']\\s{0,}tail\\s{0,}[\"']/)) {\n                console.log(replacedPath)\n                replacedPath = \"$CLAM_VER$/\"+replacedPath;\n            }\n            return $1.replace($3, cdnPathWithPort + '/' + replacedPath).replace(/[\"'](\\s{0,})([^\"']*?)(\\s{0,})[\"']/g, function($1,$2,$3) {\n                return '\"'+$3+'\"';\n            });\n        }\n    });\n\n    //处理绝对路径引用。直接增加域名和端口号\n    pageContent = pageContent.replace(absScript, function ($1, $2) {\n        return $1.replace($2, cdnPathWithPort + $2);\n    });\n    pageContent = pageContent.replace(absStyle, function ($1, $2) {\n        return $1.replace($2, cdnPathWithPort + $2);\n    });\n    //debug('处理后内容%s', pageContent);\n    return pageContent;\n}\n\nexports.toAbsolutePath = toAbsolutePath;\n","/home/travis/build/npmtest/node-npmtest-clam/node_modules/clam/lib/compile.js":"var debug = require('debug')('clam:compile');\nvar fs = require('fs');\nvar path = require('path');\nvar isUtf8 = require('is-utf8');\nvar _ = require('underscore');\nvar iconv = require('iconv-lite');\nvar util = require('util');\nvar config = require('./config.js');\nvar proxy = require(\"./proxy.js\");\nvar assetUrl = require('./asseturl.js');\n\nvar J = require(\"juicer\");\nJ.register('stringify', JSON.stringify);\nJ.register(\"random\", function(){ return (new Date()).valueOf(); });\n\nvar mocker = require('./mocker.js');\nvar assetsTool = require('./assetsTool');\n\nvar scriptExtern = /<script[^>]*? src=['\"]([^\"']*?)['\"].*?><\\/script>/g;\nvar styleExtern = /<link[^>]*? href=['\"]([^\"']*?)['\"].*>/g;\nvar assetsToolExtern = /\\$assetsTool.(use|require|injectScript|injectStyle)\\((['\"][^\\s^\\$]*['\"]\\s*,?\\s*){0,2}\\)/g;\nvar recoverAssetsToolExtern = /\\{\\{__assetsTool__\\d*\\}\\}/g;\nvar assetsToolPrefix = '__assetsTool__';\n\n/**\n * 从一段文本中抽离Assets\n * @param pageContent\n * @returns {{scripts: Array, styles: Array, pageContent: XML}}\n */\nfunction takeOutAssets(pageContent) {\n    pageContent = pageContent.replace(/\\<\\!\\-\\-^#.*\\-\\-\\>/g, '');\n    var head_scripts = [], tail_scripts = [];\n    var styles = [];\n    var movetoReg = /clam-moveto=['\"]([^\"']*?)['\"]/;\n    pageContent = pageContent.replace(scriptExtern, function (mm) {\n        var m = mm.match(movetoReg);\n        mm = mm.replace(movetoReg, '');\n        if (m && typeof m[1] != \"undefined\") {\n            if (m[1] == \"head\") {\n                head_scripts.push(mm);\n                return '';\n            }\n            else if (m[1] == \"tail\") {\n                tail_scripts.push(mm);\n                return '';\n            }\n            else {\n                return mm;\n            }\n        }\n        else {\n            head_scripts.push(mm);\n            return '';\n        }\n    });\n    pageContent = pageContent.replace(styleExtern, function ($1) {\n        if ($1.match(/rel\\s{0,}=\\s{0,}[\\'\\\"]stylesheet[\\\"\\']/) || $1.match(/type\\s{0,}=\\s{0,}[\\'\\\"]text\\/css[\\\"\\']/)) {\n            styles.push($1);\n            return '';\n        }\n        else {\n            return $1;\n        }\n    });\n    head_scripts = _.uniq(head_scripts);\n    tail_scripts = _.uniq(tail_scripts);\n    styles = _.uniq(styles);\n    return {head_scripts: head_scripts, tail_scripts: tail_scripts, styles: styles, pageContent: pageContent};\n}\n/**\n * 解析assetsTool内容\n * @param content \n * @returns content\n */\nfunction parseAssetsTool(content){\n    var assetsToolPositionCount = -1;\n    var assetsMap = [];\n    var pageContent = content.replace(assetsToolExtern, function ($1, $2, $3) {\n        saveAssetsMap(assetsMap,$1,++assetsToolPositionCount);\n        return '{{'+assetsToolPrefix + assetsToolPositionCount + '}}';\n    });\n    return recoverAssetsTool(pageContent,assetsMap);\n}\n/**\n * 生成assetsTool的模块列表\n */\nfunction saveAssetsMap(root,content,pos){\n    root.push({\n        express:content,\n        id:pos\n    });\n}\n/**\n * 复原assetsTool\n * @param content\n * @returns content\n */\nfunction recoverAssetsTool(content,map){\n    // 对map排序，将injectStyle和injectStyle排到最后执行\n    var requireMap = [];\n    var placeholderMap = [];\n\n    assetsTool.clearCacheMod();\n\n    map.forEach(function(i) {\n        /\\$assetsTool.inject(Script|Style).*/g.test(i.express) ?\n            placeholderMap.push(i):\n            requireMap.push(i);\n    });\n\n    map = requireMap.concat(placeholderMap);\n    var assetsResult = assetsTool.feLoader(map);\n\n    function getAssets(id){\n        var ret = '';\n        assetsResult.forEach(function(i){\n            if(i.id == id){\n                ret = i.express;\n                return;\n            }\n        });\n        return ret;\n    }\n    content = content.replace(recoverAssetsToolExtern, function ($1, $2, $3) {\n        return getAssets(parseInt($1.split(assetsToolPrefix)[1]));\n    });\n    return content;\n}\n/**\n * 解析页面内容\n * @param page 页面路径\n * @param url  对应url(用于替换js和css引用)\n * @param libs 库路径\n * @param rootContent 页面路径对应的内容。如果有，则无需从页面路径获取内容\n * @return {Object}\n */\nfunction parseInfo(page, libs, cdnPath, rootContent, url) {\n    debug('--------parseInfo--------%s',url);\n    var pageContent = ssi(page, libs, cdnPath, null, rootContent, url);\n    var asset = takeOutAssets(pageContent);\n    var head_scripts = asset.head_scripts, tail_scripts = asset.tail_scripts;\n    var styles = asset.styles;\n    pageContent = asset.pageContent;\n    var headTail = pageContent.indexOf('</head>');\n    var bodyContent = headTail!=-1 ? pageContent.slice(headTail) : '';\n\n    return {file: page, pageContent: pageContent, headTail: headTail, bodyContent: bodyContent, head_scripts: head_scripts, tail_scripts: tail_scripts, styles: styles};\n}\n\n/**\n * 渲染一个页面为最终样式。js和css提到头部。\n * @param page\n * @param url\n * @param libs\n * @param rootContent 页面路径对应的内容。如果有，则无需从页面路径获取内容\n * @return {*}\n */\nvar render = function(page, libs, cdnPath, rootContent, url) {\n    debug('--------render--------%s',url);\n    var ret = parseInfo(page, libs, cdnPath, rootContent, url);\n    var pageContent = ret.pageContent;\n    var headTail = ret.headTail;\n    var bodyContent = ret.bodyContent;\n    var head_scripts = ret.head_scripts, tail_scripts = ret.tail_scripts;\n    var styles = ret.styles;\n\n    var headArea = pageContent.slice(0, headTail);\n    var bodyTail = bodyContent.indexOf('</body>');\n    var bodyArea = bodyContent.slice(0, bodyTail);\n    var bodyTailArea = bodyContent.slice(bodyTail);\n    \n    var head_scriptArea = '';\n    head_scripts.forEach(function (s) {\n        head_scriptArea += '\\n' + s;\n    });\n    var tail_scriptArea = '';\n    tail_scripts.forEach(function (s) {\n        tail_scriptArea += '\\n' + s;\n    });\n\n    var styleArea = '';\n    styles.forEach(function (s) {\n        styleArea += '\\n' + s;\n    });\n\n    if (headTail == -1) {\n        pageContent = '<html><head><meta charset=\"'+config.get('project').charset[0]+'\"><meta name=\"viewport\" content=\"initial-scale=1\" />' + styleArea + head_scriptArea + '$assetsTool.injectStyle()</head><body>' + pageContent + tail_scriptArea + '$assetsTool.injectScript(\"foot\")</body></html>';    }\n    else {\n        pageContent = headArea + styleArea + head_scriptArea + bodyArea + tail_scriptArea + bodyTailArea;\n    }\n\n    pageContent = pageContent.replace(/\\$CLAM_VER\\$[\\/]?/g, '');\n    return pageContent;\n}\n\n/**\n * 获取自定义配置\n * @param content\n * @param reg\n */\nfunction parseParam(content, reg) {\n    var matched = content.match(reg);\n    var ret = {};\n    if (matched && matched[1]) {\n        matched[1].replace(/[\\n\\r]/g, '');\n        try {\n            ret = JSON.parse(matched[1]);\n        } catch (e) {\n            console.log('格式错误的模板变量:%s', matched[1]);\n            return {};\n        }\n        return ret;\n    }\n    return ret;\n}\n\nfunction parsePageParam(content) {\n    return parseParam(content, /<\\!--#def([\\s\\S]*?)-->/);\n}\n\nfunction parseTmsParam(content) {\n    return parseParam(content, /<\\!--#tms([\\s\\S]*?)-->/);\n}\n\nfunction delPageParamArea(content){\n    return content.replace(/<\\!--#def([\\s\\S]*?)-->/, '');\n}\n\n/**\n * 返回携带内容携带真正线上资源路径的内容\n * 处理相对资源引用等\n * @param rootContent 文本内容，如果没有，则从page所指向的路径中获取\n * @param page 文件路径，如果rootContent指定，则失效\n * @param cdnPath 项目assets上线后的路径前缀\n * @returns 处理完毕后的页面/模块内容\n */\nfunction textWithOnlineAssetsUrl(rootContent, page, cdnPath) {\n    var pageContent = null;\n    if (rootContent) {\n        pageContent = rootContent;\n    }\n    else {\n        pageContent = fs.readFileSync(page);\n        pageContent = isUtf8(pageContent) ? pageContent.toString() : iconv.decode(pageContent, 'gbk');\n    }\n\n    //获取当前页面到源代码根目录的相对路径\n    var srcRoot = path.join(config.root(), 'src');\n    var urlDir = path.relative(srcRoot, path.dirname(page));\n    debug('引用文件相对路径:%s', urlDir);\n    pageContent = assetUrl.toAbsolutePath(pageContent, urlDir);\n    return pageContent;\n}\n\n/**\n * 混合模块定义和内容\n * 根据modefs中定义的偏移量，替换内容信息，重组content\n * @param modDefs\n * @param pageContent\n * @returns {string}\n */\nfunction mixContentAndModules(modDefs, pageContent) {\n    var snippets = [];\n    var i;\n    for (i = 0; i < modDefs.length; i++) {\n        if (i === 0) {\n            snippets.push(pageContent.slice(0, modDefs[i].begin));\n            continue;\n        }\n        snippets.push(pageContent.slice(modDefs[i - 1].end, modDefs[i].begin));\n    }\n    snippets.push(pageContent.slice(modDefs[modDefs.length - 1].end, pageContent.length));\n\n    var output = \"\";\n    for (i = 0; i < modDefs.length; i++) {\n        output = output + snippets[i] + (modDefs[i].content ? modDefs[i].content : '');\n        if (i === modDefs.length - 1) {\n            output += snippets[i + 1];\n        }\n    }\n    return output;\n}\n\n/**\n * 按照SSI解析输出html\n * 解析html时会依次遍历所有模块\n * 改函数处理所有与相对路径有关的内容替换，如根据相对路径替换其中的资源路径\n *\n * @param page  页面或者模块文件名的绝对路径\n * @param libs  其他模块搜索目录\n * @param cdnPath 最终assets上线后所在的cdn域名+路径前缀\n * @param parentParam 父级容器传递给当然页面片段的变量\n *                    变量使用优先级\n *                    网络>本地http接口模拟>if接口>文件中即时定义的变量\n * @param rootContent 页面路径对应的内容。如果有，则无需从页面路径获取内容\n * @param url     页面访问url,如果该渲染请求由网络请求触发，则为请求url\n *                如果渲染请求由本地触发，则为到src目录的相对路径\n * @return {*}\n */\nvar ssi = function(page, libs, cdnPath, parentParam, rootContent, url) {\n    debug('开始渲染, 文件:%s,库目录:%s', page, util.inspect(libs));\n    debug('--------ssi--------%s',url);\n    //页面不存在，返回空内容\n    if (!fs.existsSync(page)) {\n        return '';\n    }\n    //处理cdnpath中最后一个'/'符号。如果有，去掉。\n    if (cdnPath[cdnPath.length - 1] === '/') {\n        cdnPath = cdnPath.slice(0, cdnPath.length - 1);\n    }\n\n    var pageContent = rootContent;\n    if (!rootContent) {\n        pageContent = fs.readFileSync(page);\n        pageContent = isUtf8(pageContent) ? pageContent.toString() : iconv.decode(pageContent, 'gbk');\n\n    }\n    var pageParam = parsePageParam(pageContent);\n\n    var param = {};\n    debug('getMixedMockDate1%s', util.inspect(param));\n    //本地参数覆盖外部参数\n    if (parentParam) {\n        for (var attr in pageParam) { parentParam[attr] = pageParam[attr]; }\n        param = parentParam;\n    }\n    else {\n        debug('内部获取参数%s', util.inspect(pageParam));\n        for (var attr in pageParam) {\n            if(attr[0] === '#'){\n                var attrFixed = attr.slice(1, attr.length);\n                param[attrFixed] = pageParam[attr];\n                continue;\n            }\n            param[attr] = pageParam[attr];\n        }\n    }\n    debug('getMixedMockDate2%s', util.inspect(param));\n    param = mocker.getMixedMockDate(param, url, (!!rootContent));\n    debug('真实运作的参数%s', util.inspect(param));\n\n    try {\n        pageContent = J(pageContent, param);\n    }\n    catch (e) {\n        debug('Juicer出错%s\\n 对象:%s', pageContent, util.inspect(param));\n    }\n\n    pageContent = textWithOnlineAssetsUrl(pageContent, page, cdnPath);\n    pageContent = delPageParamArea(pageContent);\n\n    //获得模块及其起始位置信息\n    var modDefs = getModuleDefs(pageContent);\n    if (modDefs.length === 0) {\n        return pageContent;\n    }\n\n    //获取子模块内容\n    var i = 0, j = 0, k = 0, d = 0,\n        modFile = '';\n    for (; i < modDefs.length; i++) {\n        //在当前目录寻找子模块，当前目录有可能是页面目录，也有可能在模块目录中\n        modFile = modDefs[i].file;\n        if (modDefs[i].tms.match(/^\\d+\\:/)) {\n            modDefs[i].content = \"<!--#tms file=\\\"\"+modDefs[i].tms.replace(/^\\d+\\:/, '')+\"\\\"-->\";\n        }\n        else if (modFile) {\n            var modPath = path.join(path.dirname(page), modFile);\n            var modExist = fs.existsSync(modPath);\n            debug('模块%s, 路径%s,在页面库中%s', modFile, modPath, modExist);\n\n            //当前目录没找到，到模块库中寻找\n            if (!modExist) {\n                for (j = 0; j < libs.length && !modExist; j++) {\n                    modPath = path.join(libs[j], modFile);\n                    modExist = fs.existsSync(modPath);\n                    if (modExist) {\n                        break;\n                    }\n                }\n            }\n\n            //模块库中仍然没找到，令内容为空，处理其他模块\n            if (!modExist) {\n                modDefs[i].content = '';\n                continue;\n            }\n\n            //处理模块传参\n            var paramAttr = modDefs[i].param, passedParam = null;\n            if (param) {\n                if (paramAttr) {\n                    if (paramAttr.match(/\\:/)) {\n                        paramAttr = paramAttr.replace(/\\s{0,}([\\:\\,])\\s{0,}/g, function(a,b) {return b;});\n                        try {\n                            var arr = paramAttr.split(\",\"), m = [], deep = [], pp = {};\n                            passedParam = {};\n                            for (k=0; k<arr.length; k++) {\n                                m = arr[k].match(/(.+)\\:(.+)/);\n                                if (m && typeof m[1] != \"undefined\" && typeof m[2] != \"undefined\") {\n                                    if (m[2].match(/^\\$(.+)/)) {\n                                        deep = m[2].replace(/^\\$/,'').split('.');\n                                        pp = param;\n                                        for (d= 0; d<deep.length; d++)    pp = pp[deep[d]];\n                                        passedParam[m[1]] = pp;\n                                    }\n                                    else {\n                                        passedParam[m[1]] = m[2];\n                                    }\n                                }\n                            }\n                        }\n                        catch (e) {console.log(e);}\n                    }\n                    else {\n                        passedParam = param[paramAttr];\n                    }\n                }\n                else {\n                    passedParam = param;\n                }\n            }\n\n            debug('传递的参数是%s', util.inspect(passedParam));\n            //渲染所有子模块内容\n            modDefs[i].content = ssi(modPath, libs, cdnPath, passedParam, null, url ? url : page);\n        }\n    }\n\n    var output = mixContentAndModules(modDefs, pageContent);\n    return output;\n}\n\n/**\n *\n * 返回一个Pagelet集合，一个Pagelet以数组的型式记录了以下信息\n * {\n *   file     :   文件名=>eachFile,\n *   begin    :   在内容中的开始位置=>itBegin,\n *   end      :   在内容中的结束位置=>itEnd\n *   content  :   Pagelet的内容\n * }\n * @param c\n * @return {Array}\n */\nvar getModuleDefs = function(c) {\n    var file2offset = [], itBegin = 0, itEnd = 0, itFile='', itParam='', itTMS='',\n        it = 0, line = '', file_args = [], file = [], args = [], tms = [];\n\n    while( (it = c.indexOf('<!--#include', it) ) !== -1) {\n        itTMS = itFile = itParam = '';\n\n        itBegin = it;\n        it = it + 12;\n        while(c[it]  === ' ') it++;\n        itEnd = c.indexOf('-->', it);\n        itEnd = (itEnd === -1) ? (c.length-1) : (itEnd+3);\n\n        // 区分简写和完整写法\n        line = c.slice(it, itEnd-3);\n        if (c[it].match(/[\"']/)) {\n            file_args = line\n                .replace(/(^\\s{0,}[\"']\\s{0,})|(\\s{0,}[\"']\\s{0,}$)/g, '')\n                .split(/\\s{0,}[\"']\\s+[\"']\\s{0,}/g);\n            itFile  = file_args[0];\n            if (itFile.match(/^tms\\:\\d+\\:/)) {\n                itTMS = itFile.replace(/^tms\\:/, '');\n                itFile = '';\n            }\n            itParam = file_args[1] ? file_args[1] : '';\n        }\n        else {\n            file = line.match(/file\\s{0,}=\\s{0,}[\"']\\s{0,}([^\"']*?)\\s{0,}[\"']/);\n            args = line.match(/data\\s{0,}=\\s{0,}[\"']\\s{0,}([^\"']*?)\\s{0,}[\"']/);\n            tms  = line.match(/tms\\s{0,}=\\s{0,}[\"']\\s{0,}([^\"']*?)\\s{0,}[\"']/);\n            itFile  = (file && file[1]) ? file[1] : '';\n            itParam = (args && args[1]) ? args[1] : '';\n            itTMS   = (tms  && tms[1])  ? tms[1]  : '';\n        }\n\n        file2offset.push({file: itFile, begin: itBegin, end: itEnd, content:'', param: itParam, tms:itTMS});\n        it = itEnd;\n    }\n\n    return file2offset;\n}\n\nexports.render = render;\nexports.ssi = ssi;\nexports.parseInfo = parseInfo;\nexports.textWithOnlineAssetsUrl = textWithOnlineAssetsUrl;\nexports.getModuleDefs = getModuleDefs;\nexports.mixContentAndModules = mixContentAndModules;\nexports.takeOutAssets = takeOutAssets;\nexports.parsePageParam = parsePageParam;\nexports.parseTmsParam = parseTmsParam;\nexports.parseAssetsTool = parseAssetsTool;\n","/home/travis/build/npmtest/node-npmtest-clam/node_modules/clam/lib/proxy.js":"var http = require(\"http\");\nvar joinbuffers = require(\"joinbuffers\");\nvar isUtf8 = require('is-utf8');\nvar iconv = require('iconv-lite');\nvar config = require('./config.js');\n\nvar prjInfo = config.get('project');\n\nvar green  = '\\u001b[32m';\nvar red    = '\\u001b[31m';\nvar blue   = '\\u001b[34m';\nvar gray   = '\\u001b[37m';\nvar yellow = '\\u001b[33m';\nvar reset  = '\\u001b[0m';\n\nfunction cosoleResp(type, c){\n    if(type == \"Need\"){\n        console.log('%s=>Need     : %s%s%s  %s',green, reset, blue, c, reset);\n        return;\n    }\n    if(type == 'Not found'){\n        console.log('%s<=Not found: %s%s%s  %s',red, reset, gray, c, reset);\n        return;\n    }\n    if(type == 'Actually'){\n        console.log('%s   Actually: %s%s%s  %s',green, reset, gray, c, reset);\n        return;\n    }\n    if(type == 'Remote'){\n        console.log('%s<=Remote   : %s%s%s  %s',green, reset, gray, c, reset);\n        return;\n    }\n    console.log(green+'<='+type+': ' + reset + gray + ' ' + c + ' ' + reset);\n    return;\n}\nfunction isBinFile(fileName){\n    fileName = fileName.split('?')[0];\n    return !/.js$|.css$|.less$/.test(fileName);\n}\nfunction adaptCharset(buff, outCharset, charset){\n    if (charset === outCharset) {\n        return buff;\n    }\n\n    return iconv.encode(iconv.decode(buff, charset), outCharset);\n}\n\nexports.fetch = function(url, host, callback) {\n    var filteredUrl = url,\n        requestOption = {\n            path: url,\n            host: host,\n            port: 80,\n            agent: false\n        };\n\n    callback = typeof callback == \"function\" ? callback : function(code){console.log(code);};\n\n    http.get(requestOption, function(resp) {\n        var buffs = [];\n        if (resp.statusCode !== 200) {\n            var headerHost = requestOption.host;\n            cosoleResp('Not found', requestOption.host + requestOption.path + ' (host:'+ reset + yellow + headerHost + reset + ')');\n            callback('File ' + requestOption.host + requestOption.path + ' not found.', 404);\n            return;\n        }\n        resp.on('data', function(chunk) {\n            buffs.push(chunk);\n        });\n        resp.on('end', function() {\n            var buff = joinbuffers(buffs);\n\n            //fix 80% situation bom problem.quick and dirty\n            if(buff[0] === 239 && buff[1] === 187 && buff[2] === 191) {\n                buff = buff.slice(3, buff.length);\n            }\n            if(isBinFile(filteredUrl)){\n                cosoleResp('Remote', requestOption.host + requestOption.path);\n                callback(buff, 200);\n                return;\n            }\n            cosoleResp('Remote', requestOption.host + requestOption.path);\n            var charset = isUtf8(buff) ? 'utf8' : 'gbk';\n            var outputCharset = prjInfo.charset[0];\n\n            callback(adaptCharset(buff, outputCharset, charset), 200);\n            return;\n        });\n    }).on('error',function() {\n        callback('404 Error, File not found.', 404);\n        return;\n    });\n}\n","/home/travis/build/npmtest/node-npmtest-clam/node_modules/clam/lib/_convert.js":"var connect = require('connect');\nvar http = require('http');\nvar app = connect();\nvar os  = require('os');\nvar exec = require('child_process').exec;\nvar project = require('../lib/project.js');\nvar config = require('../lib/config.js');\nvar mod = require('../lib/mod.js');\nvar page = require('../lib/page.js');\nvar widget = require('../lib/widget.js');\nvar path = require('path');\nvar jspage = require('./jspage.js');\nvar mkdirp = require('mkdirp');\nvar fs = require('fs');\n\n\nexports = module.exports = function(dir){\n    var appDir = path.resolve(__dirname,'..');\n    //初始化项目\n\n    var prjInfo = config.get('project');\n    var targetPath = path.join(dir);\n    \n    //创建目录目录\n    if(!fs.existsSync(targetPath)){\n        mkdirp.sync(targetPath);\n        console.log(\"成功创建目录 %s\", targetPath);\n    }else {\n        console.log(\"同名目录已存在！\");\n        return;\n    }\n    \n    //转换mod\n    \n    //转换page\n}\n\n","/home/travis/build/npmtest/node-npmtest-clam/node_modules/clam/lib/jspage.js":"/**\n * 处理预览网页请求。\n * 如果是目录，则返回目录列表\n */\n\nvar fs        = require('fs')\n    , path    = require('path')\n    , join    = path.join\n    , _       = require('underscore')\n    , mime    = require('mime')\n    , util    = require('util')\n    , http    = require('http')\n    , debug   = require('debug')('clam:jspage')\n    , config  = require('./config.js')\n    , compile = require('./compile.js')\n    , proxy   = require(\"./proxy.js\")\n    , J       = require(\"juicer\")\n    , isUtf8  = require('is-utf8')\n    , crypto  = require('crypto')\n    , iconv   = require('iconv-lite')\n    , urlLib  = require('url')\n    , conf    = {\n        \"templateDir\"      : \"../ui/\",\n        \"template\": \"folder-viewer.html\"\n    };\n//var pathUtil = require('path');\n\n/**\n * 传入参数option格式\n * {\n *    root: '/',\n *    mapping: {'/aaaa': ['aaa/bbb.html', 'ccc/aaa.html']},\n *    maxAge : 1000,\n *    charset : 'gbk',\n *    modsDir: [], //相对项目目录的模块目录位置，可以有多个\n * }\n */\nexports = module.exports = function jspage(basePath) {\n    basePath = basePath ? basePath : \"src\";\n    var prjInfo = config.get('project');\n    var root = config.root();\n    var pageInfo = config.get('page');\n    var mapping = {};\n    _.each(pageInfo, function(value){\n        mapping[value.url] = value.name;\n    });\n    debug('页面映射%s, \\n %s', util.inspect(pageInfo), util.inspect(mapping));\n    var modsDir = path.join(root, basePath);\n\n    config.on('pageChange', function(){\n        pageInfo = config.get('page');\n        mapping = {};\n        _.each(pageInfo, function(value){\n            mapping[value.url] = value.name;\n        });\n        debug('page.json文件被修改:%s', util.inspect(mapping));\n    });\n    return function(req, res, next) {\n        var URLParse = urlLib.parse(req.url);\n\n        var url = URLParse.pathname;\n        var pageRootPath = join(root, basePath);   // 页面根目录\n\n        //请求的url真正相对页面根目录的路径。因为可以有目录映射。\n        var realPageRelativePath = exports.mappedFile(url, pageRootPath, mapping);\n        debug('页面请求%s -> %s', url.replace(/^[\\/]/, ''), util.inspect(realPageRelativePath));\n        //既不是文件。也不是目录\n        if(!realPageRelativePath || realPageRelativePath === '') {\n            if (!prjInfo.hostsMap || !prjInfo.hostsMap[req.headers.host]) {\n                res.writeHead(404, { 'Content-Type': 'text/html;charset=utf-8'});\n                res.end('404 Error, File not found.');\n                return;\n            }\n\n            proxy.fetch(\n                req.url,\n                prjInfo.hostsMap ? prjInfo.hostsMap[req.headers.host] : '',\n                function(content, code) {\n                    if (code == 200) {\n                        res.end(isUtf8(content) ? content.toString() : iconv.decode(content, 'gbk'));\n                    }\n                    else {\n                        res.writeHead(code, { 'Content-Type': 'text/html;charset=utf-8'});\n                        res.end(content);\n                    }\n                }\n            );\n            return;\n        }\n        //返回数组，表示是目录，需要显示目录。\n        if(util.isArray(realPageRelativePath)){\n            var files = realPageRelativePath.sort();\n            debug('files', util.inspect(files));\n            var tplPath = path.join(__dirname, conf.templateDir, conf.template);\n            _.map(files, function(file){\n                file.path = path.join(url, file.name);\n                return file;\n            })\n            // this is using juicer engine only\n            var pageContent = J(fs.readFileSync(tplPath).toString(), {folder : url, back: join(url, '..').replace(/\\\\/g, '/'), folderInfo:files});\n            // this is using an include render and juicer \n            // var pageContent = J(compile.render(tplPath, [modsDir], prjInfo.cdnPath), {folderInfo: files});\n            pageContent = new Buffer(pageContent);\n            res.setHeader('Content-Type', 'text/html;charset=utf-8');\n            res.setHeader('Content-Length', pageContent.length);\n            res.end(pageContent);\n            return;\n        }\n        //页面在服务器真实绝对路径\n        var realAbsPapePath = join(pageRootPath, realPageRelativePath);\n        //只处理html文件的SSI等高级语法\n        if(realPageRelativePath.match(/.*\\.html$/)){\n            //html文件有片段和页面之分\n            var rootContent = fs.readFileSync(realAbsPapePath);\n            rootContent = isUtf8(rootContent) ? rootContent.toString() : iconv.decode(rootContent, 'gbk');\n\n            var pageContent = '', tmsContent = [];\n            try {\n                pageContent = compile.render(realAbsPapePath, [modsDir], prjInfo.cdnPath, rootContent, url);\n                // 解析assetsTool\n                pageContent = compile.parseAssetsTool(pageContent);\n            }\n            catch(e) {\n                console.log(util.inspect(e));\n                res.writeHead(500, {'Content-Type' : 'text/html;charset=utf-8'});\n                res.end('500 Error, Internal Server Error.');\n                return;\n            }\n\n            var matches = pageContent.match(/(<!--#tms file=\")(http:\\/\\/([^\\:|\\/]+)(\\:\\d*)?(.*\\/)([^#|\\?|\\n]+)?(#.*)?(\\?.*)?)(\"-->)/ig),\n                m = [];\n            matches = _.uniq(matches ? matches : []);\n            for (var i=0; i<matches.length; i++) {\n                m = matches[i].match(/(<!--#tms file=\")(http:\\/\\/([^\\:|\\/]+)(\\:\\d*)?(.*\\/)([^#|\\?|\\n]+)?(#.*)?(\\?.*)?)(\"-->)/i);\n                if (m && m[2] && m[3]) {\n                    tmsContent.push(false);\n                    proxy.fetch(\n                        m[2],\n                        m[3],\n                        (function(i){\n                            return function(content) {\n                                tmsContent[i] = isUtf8(content) ? content.toString() : iconv.decode(content, 'gbk');\n                                sendData();\n                            }\n                        })(i)\n                    );\n                }\n            }\n\n            var sendData = function() {\n                for (var j = 0, len = matches.length; j < len; j++) {\n                    if (tmsContent[j] === false) {\n                        return;\n                    }\n                    else {\n                        pageContent = pageContent.replace(new RegExp(matches[j], 'g'), tmsContent[j]);\n                    }\n                }\n                if (!pageContent.match(/<\\!DOCTYPE/)) {\n                    pageContent = '<!DOCTYPE html>'+pageContent;\n                }\n\n                if(prjInfo.charset[0].match(/gbk/i)){\n                    pageContent = iconv.encode(pageContent, 'gbk');\n                }\n                //输出前必须转换为Buffer，以便为Content-Length取得正确的length\n                if (!(pageContent instanceof Buffer)) {\n                    pageContent = new Buffer(pageContent);\n                }\n                res.setHeader('Content-Type', mime.lookup(realPageRelativePath) + '; charset=' + prjInfo.charset[0]);\n                res.setHeader('Content-Length', pageContent.length);\n                res.setHeader('Transfer-Encoding', 'chunked');\n                res.end(pageContent);\n            }\n            sendData();\n        }\n        else {\n            //其他格式的文件按照原内容返回\n            var stream = fs.createReadStream(realAbsPapePath, {});\n            req.on('close', stream.destroy.bind(stream));\n            stream.pipe(res);\n\n            stream.on('error', function(err){\n                if (res.headerSent) {\n                    req.destroy();\n                } else {\n                    next(err);\n                }\n            });\n        }\n    };\n};\n\nfunction parseToDir(maps){\n    var virtualRoot = {};\n    for(var k in maps){\n        var currentObj = virtualRoot;\n        var dirs = k.split('/');\n        dirs[0] = '/';\n        for(var i = 0, len = dirs.length; i < len; i++){\n            var currentDir = currentObj[dirs[i]];\n            if(!currentDir){\n                currentObj[dirs[i]] = {};\n            }\n            currentObj = currentObj[dirs[i]];\n        }\n    }\n    return virtualRoot;\n}\n\n\n/**\n * 根据url和映射关系返回对应真正的内容\n * 返回值有3种情况\n * 如果为null，则表示此url既不能对应到虚拟路径，也不能对应到实际路径。\n * 如果为字符串，则表示此url最终对应到一个文件。\n * 如果为数组，则表示此url最终对应到一个目录。\n * @param url\n * @param maps\n * @return {*}\n */\nexports.mappedFile = function mappedFile(url, root, maps){\n    var subDirs = [];\n    debug('url:%s, map定义:%s',url, util.inspect(maps));\n    \n    //在表中定义过的映射,根据不同情况返回子目录或已存在内容的文件地址\n    var mappedFile = maps[url];\n    if(mappedFile){\n        var mappedRealDir = join(root, mappedFile);\n        var state = null;\n        if(fs.existsSync(mappedRealDir)){\n            state = fs.statSync(mappedRealDir);\n            if(state.isDirectory()){\n                subDirs = fs.readdirSync(mappedRealDir);\n                subDirs = _.map(subDirs, function(subFile){\n                    var state = fs.statSync(path.join(mappedRealDir, subFile));\n                    return {name: subFile, isDir: state.isDirectory()};\n                });\n                return subDirs;\n            }\n            else{\n                return mappedFile;\n            }\n        }\n        else{\n            return null;\n        }\n    }\n\n    //寻找真实root目录下的相关文件，如果是目录，需要把目录的内容和映射定义中的合并起来\n    var realDir = join(root, url);\n    debug('寻找物理目录:%s', realDir);\n    if (realDir.match(/.htm$/) && !fs.existsSync(realDir)) {\n        realDir += 'l';\n    }\n    if(fs.existsSync(realDir)){\n        var state = fs.statSync(realDir);\n        if(!state.isDirectory()){\n            return path.relative(root, realDir);\n        }\n\n        //寻找子目录\n        var realsubDirs = fs.readdirSync(realDir);\n        realsubDirs = _.map(realsubDirs, function(subFile){\n            var state = fs.statSync(path.join(realDir, subFile));\n            return {name: subFile, isDir: state.isDirectory()};\n        });\n        subDirs = subDirs.concat(realsubDirs);\n    }\n\n    //不是表定义中的映射，url有可能是定义映射key的一部分\n    var virtual = parseToDir(maps);\n\n    var currentVirtual = null;\n    debug('url is : %s',url);\n    var dirs = url.split('/');\n    dirs[0] = '/';\n    debug(util.inspect(dirs));\n    for (var i = 0; i < dirs.length; i++) {\n        if(dirs[i] === '') continue;\n        if(virtual[dirs[i]]){\n            virtual = virtual[dirs[i]];\n            currentVirtual = virtual;\n        }\n        else{\n            currentVirtual = null;\n            break;\n        }\n    };\n    debug('虚拟目录%s', util.inspect(currentVirtual));\n    if(currentVirtual){\n        for(var subPath in currentVirtual){\n            var isDir = false;\n            for(var subSubPath in currentVirtual[subPath]){\n                isDir = true;\n                break;\n            }\n            var subPathMapping = maps[path.join(url, subPath)];\n            if(subPathMapping){\n                subPathMapping = path.join(root, subPathMapping);\n                if(fs.existsSync(subPathMapping)){\n                    state = fs.statSync(subPathMapping);\n                    if(state.isDirectory()){\n                        isDir = true;\n                    }\n                }\n            }\n            var exist = _.find(subDirs, function(ss){\n                return ss.name === subPath;\n            });\n            if(!exist){\n                subDirs.push({name: subPath, isDir: isDir});\n            }\n        }\n        \n    }\n    if (subDirs.length !== 0){\n        return subDirs;\n    }\n\n    var longestMatchedKey = '';\n    for(var j = 0; j < i; j++){\n        longestMatchedKey = path.join(longestMatchedKey, dirs[j]);\n    }\n    debug('最长匹配路径转换后key%s', longestMatchedKey);\n    if(maps[longestMatchedKey]){\n        var lastPath = url.replace(longestMatchedKey, '');\n        var longestMatchedPath = path.join(root, maps[longestMatchedKey], lastPath);\n        debug('最长匹配路径转换后%s', longestMatchedPath);\n        if(fs.existsSync(longestMatchedPath)){\n            var longgestMatchedState = fs.statSync(longestMatchedPath);\n            if(longgestMatchedState.isDirectory()){\n                var longgestMatchedSubDirs = fs.readdirSync(longestMatchedPath);\n                longgestMatchedSubDirs = _.map(longgestMatchedSubDirs, function(subFile){\n                    var state = fs.statSync(path.join(longestMatchedPath, subFile));\n                    return {name: subFile, isDir: state.isDirectory()};\n                });\n                return longgestMatchedSubDirs;\n            }\n            else{\n                return path.join(maps[longestMatchedKey], lastPath);\n            }\n        }\n        else{\n            return null;\n        }\n    }\n}\n","/home/travis/build/npmtest/node-npmtest-clam/node_modules/clam/lib/dataApiHandle.js":"var joinbuffers = require(\"joinbuffers\");\nvar isUtf8 = require('is-utf8');\nvar iconv = require('iconv-lite');\nvar config = require('./config.js');\n\nvar prjInfo = config.get('project');\n\nvar http = require('http');\nvar https = require('https');\nvar net = require('net');\nvar debug = require('debug')('Clam:requestHandle');\nvar _ = require('underscore');\n\nvar path = require('path');\nvar uri = require('url');\nvar fs = require('fs');\n\nexports = module.exports = function () {\n    return function (req, res, next) {        \n        var remotes = exports.remotes;\n        // no interfaces defined\n        if (!remotes || !remotes.length) {\n            next();\n            return;\n        }\n        var url = uri.parse(req.url);\n        _.some(remotes, function (options) {\n            // equals or matched the option pathname \n            if (options.pathname === url.pathname || url.pathname.match(options.pathname)) {\n                exports.proxy(req, res, next, options);\n                return true;\n            }\n        }) || next();\n    };\n};\nexports.remotes = [];\n\n// 'https://www.taobao.com:80/a/d/b?a=1&b=2'.match(/^(?:(http(?:s*)|socket):\\/\\/)*([^\\:\\/]+)*(?:\\:(\\d+))*(\\/[^?]*)(?:\\?(.*))*$/)\n// [\"https://www.taobao.com:80/a/d/b?a=1&b=2\", \"https\", \"www.taobao.com\", \"80\", \"/a/d/b\", \"a=1&b=2\"]\n// 'socket://www.taobao.com:80/a/d/b?a=1&b=2'.match(/^(?:(http(?:s*)|socket):\\/\\/)*([^\\:\\/]+)*(?:\\:(\\d+))*(\\/[^?]*)(?:\\?(.*))*$/)\n// [\"socket://www.taobao.com:80/a/d/b?a=1&b=2\", \"socket\", \"www.taobao.com\", \"80\", \"/a/d/b\", \"a=1&b=2\"]\n// 'socket://www.taobao.com:80/a/d/b?a=1&b=2'.match(/^(?:(http(?:s*)|socket):\\/\\/)*([^\\:\\/]+)*(?:\\:(\\d+))*(\\/[^?]*)(?:\\?(.*))*$/)\nexports._reFullURI = /^(?:(http(?:s*)|socket):\\/\\/)*([^\\:\\/]+)*(?:\\:(\\d+))*(\\/[^?]*)(?:\\?(.*))*$/;\n\nif (prjInfo && prjInfo.dataApi) {\n  _.each(prjInfo.dataApi, function (options) {\n    // 接口文件放到\n    var local = path.join(config.root(), '/.clam/dataApi/', options.local || '');\n    var remote = (options.remote || '').match(exports._reFullURI);\n    var type = options.type || 'auto';\n    var pathname = options.url;\n    if (!pathname || !remote) {\n      debug('Failed to build remote %s from %s !', remote, local);\n    }\n    exports.remotes.push({\n      pathname: pathname,\n      type: type,\n      local: local,\n      remote: {\n        // http(s) socket\n        agreement: remote[1] || 'http',\n        domain: remote[2] || 'localhost',\n        port: remote[3] || 80,\n        pathname: remote[4] || '',\n        querystring: remote[5] || ''\n      }\n    });\n  });\n}\n\nexports.handle = exports;\nexports.proxy = function (req, res, next, options) {\n    if (options.type === 'auto' || options.type === 'local') {\n        exports._local(req, res, next, options);\n    }\n    if (options.type === 'remote') {\n        exports._remote(req, res, next, options);\n    }\n};\nexports._local = function (req, res, next, options) {\n    fs.stat(options.local, function (err, stats) {\n        if (!err && stats.isFile()) {\n            var action = require(options.local);\n            if ('function' === typeof action.handle) {\n                action.handle(req, res, next, options);\n                return;\n            }\n            try {\n                // 反回的数据不是模块，就认为是json了。只允许两种。推荐直接返回json。\n                // 如果会nodejs。直接操作数据。方便。快捷\n                res.setHeader('Content-Type', 'application/json;text/json; charset=' + exports.charset);\n                res.write(JSON.stringify(action));\n                res.end();\n            } catch ( e ) {\n                debug('Stringify failed! Data: %o \\n\\r File: %s', action, options.local);\n                res.end(JSON.stringify({\n                    \"errno\": 500,\n                    \"errmsg\": \"Stringify failed ! Please check your action file : \"+options.local+\"! \"\n                }));\n            }\n            return;\n        }\n        if (options.type === 'auto') {\n            return exports._remote(req, res, next, options);\n        }\n        return next();\n    });\n};\nexports._remote = function (req, res, next, options) {\n    if (options.remote.agreement === 'http') {\n        return exports.httpProxy(req, res, next, options);\n    }\n    if (options.remote.agreement === 'https') {\n        return exports.httpsProxy(req, res, next, options);\n    }\n    if (options.remote.agreement === 'socket') {\n        return exports.socketProxy(req, res, next, options);\n    }\n    debug('Remote failed; Unknown agreement <%s> ', options.agreement);\n    next();\n};\nexports.charset = prjInfo ? prjInfo.charset[0] : \"utf-8\";\nexports.httpProxy = function (req, res, next, options) {\n    var remote = options.remote;\n    var url = uri.parse(req.url);\n    var pathname = remote.pathname || url.pathname;\n    var querystring = remote.querystring;\n    querystring += (url.query ? '&' : '') + (url.query || '');\n\n    var nsreq = http.request({\n        host: remote.domain,\n        port: remote.port,\n        path: pathname + '?' + querystring,\n        method: req.method,\n        headers: req.headers\n    }, function (nsres) {\n        res.statusCode = nsres.statusCode;\n        // 返回的数据中头信息确保为对方反馈数据\n        var headers = nsres.headers;\n        var headerItem;\n        var header;\n        for (header in headers) {\n            headerItem = headers[header];\n            res.setHeader(header, headerItem);\n        }\n        var buffs = [];\n        // 收到数据，立刻返回。\n        nsres.on('data', function (chunk) {\n            buffs.push(chunk);\n        });\n        // 结束同时关闭此次连接\n        nsres.on('end', function () {\n            buff = joinbuffers(buffs);\n            //fix 80% situation bom problem.quick and dirty\n            if(buff[0] === 239 && buff[1] === 187 && buff[2] === 191) {\n                buff = buff.slice(3, buff.length);\n            }\n            var buffChatset = isUtf8(buff) ? 'utf8' : 'gbk';\n            if (buffChatset !== exports.charset) {\n                buff = iconv.encode(iconv.decode(buff, buffChatset), exports.charset);\n            }\n            res.write(buff);\n            res.end();\n        });\n    });\n    req.on('data', function (chunk) {\n       nsreq.write(chunk);\n    });\n    req.on('end', function () {\n       nsreq.end(); \n    });\n    nsreq.on('error', function (e) {\n        debug(e);\n    }); \n};\nexports.httpsProxy = function (req, res, next, info) {\n    // ? \n};\nexports.socketProxy = function (req, res, next, info) {\n    // ?\n};","/home/travis/build/npmtest/node-npmtest-clam/node_modules/clam/lib/jsonHandle.js":"var debug = require('debug')('clam:jsonHandle');\nvar config = require('./config.js');\nvar _ = require('underscore');\nvar http = require('http');\nvar joinbuffers = require('joinbuffers');\nvar path = require('path');\n\nfunction jsonHandle() {\n    return function (req, res, next) {\n        var prjInfo = config.get('project');\n        var url = req.url;\n        if(url.indexOf('?') != -1){\n            url = url.slice(0, url.indexOf('?'));\n        }\n        var isJson = false;\n        var jsonHandles = prjInfo.json;\n        if(!jsonHandles || jsonHandles.length === 0){\n            next();\n            return;\n        }\n        for(var i = 0; i < jsonHandles.length; i++){\n            var map = jsonHandles[i];\n            var re = new RegExp(map.url);\n            if (url.match(re)) {\n                isJson = true;\n                if(map.enabled === 'local'){\n                    //到本地找\n                    var localFile = path.join(config.root(), '.clam/json', map.local);\n                    var localHandle = require(localFile);\n                    if(localHandle(req, res)){\n                        return;\n                    }\n                }\n\n                http.get({host:map.remote, port:80, path:req.url},function (resp) {\n                    var buffs = [];\n                    if (resp.statusCode !== 200) {\n                        res.end('File ' + url + ' not found.');\n                        return;\n                    }\n                    resp.on('data', function (chunk) {\n                        buffs.push(chunk);\n                    });\n                    resp.on('end', function () {\n                        var buff = joinbuffers(buffs);\n\n                        //fix 80% situation bom problem.quick and dirty\n                        if (buff[0] === 239 && buff[1] === 187 && buff[2] === 191) {\n                            buff = buff.slice(3, buff.length);\n                        }\n                        res.setHeader(\"Content-Type\", \"text/html\");\n                        res.end(buff);\n                    });\n                }).on('error', function (e) {\n                        debug(e);\n                });\n                break;\n            }\n        }\n        if(!isJson){\n            next();\n        }\n    }\n}\nexports.json = jsonHandle;","/home/travis/build/npmtest/node-npmtest-clam/node_modules/clam/lib/mocker.js":"var config = require('./config.js');\nvar fs  = require('fs');\nvar util = require('util');\nvar path = require('path');\nvar walker = require('./util/walk.js');\nvar debug = require('debug')('clam:getMixedMockDate');\n\nvar ifDatas = {};\nvar global = {};\n\nfunction initFromIF(){\n    var root = config.root();\n    var dataPath = path.join(root,'.clam/data');\n    if(!fs.existsSync(dataPath)){\n        return;\n    }\n    var files = walker.walkSync(dataPath);\n\n    for(var i = 0; i < files.length; i++){\n        var file = files[i];\n        if(path.extname(file) !== '.js'){\n            continue;\n        }\n        var ifData = require(file);\n        var url = '';\n        if(ifData.config && ifData.config.url){\n            url = ifData.config.url;\n        }\n        else{\n            url = path.relative(dataPath, file);\n            url = '/' + path.basename(url, '.js');\n        }\n        \n        ifDatas[url] = ifData;\n    }\n    \n}\n\nfunction init(){\n    ifDatas = {};\n    global = {};\n    var prjMockData = config.get('mock');\n    if(!prjMockData){\n        config.set('mock', {});\n        prjMockData = {};\n    }\n    global = prjMockData;\n    initFromIF();\n}\ninit();\nfunction getMixedMockDate(param, url, isRootPage){\n    if(!param){\n        param = {};\n    }\n    \n    if(global){\n        for(var prop in global){\n            if(param[prop]){\n                continue;\n            }\n            param[prop] = global[prop];\n        }    \n    }\n    param['_pageUrl'] = url;\n    param['_pageBaseName'] = path.basename(url);\n    if(!isRootPage){\n        return param;\n    }\n    if(!ifDatas[url]){\n        return param;\n    }\n    var urlData = ifDatas[url].response;\n    if(urlData){\n        for(var ifProp in urlData){\n            if(param[ifProp]){\n                continue;\n            }\n            param[ifProp] = urlData[ifProp];\n        }\n    }\n    debug('页面最终内容%s',url, util.inspect(param));\n    return param;\n}\n\nexports.getMixedMockDate = getMixedMockDate;","/home/travis/build/npmtest/node-npmtest-clam/node_modules/clam/lib/pacHandle.js":"var url = require('url');\nvar path = require('path');\n\nexports = module.exports = function () {\n  return function (req, res, next) {\n    var urlInfo = url.parse(req.url, true);\n    var extname = path.extname(urlInfo.pathname);\n    if (extname === '.pac') {\n      var ipAddress = JSON.stringify(exports.localAddresses);\n      var localAddress = req.connection.localAddress.split(':').pop();\n      var pac = [\n        'var ipAddress = ' + ipAddress + ';',\n        'function FindProxyForURL (url, host) {',\n          'var host = host.split(\":\")[0].toLowerCase();',\n          'var url = url.toLowerCase();',\n          'if (ipAddress.indexOf(host) != -1 || url.substring(0, 6) === \"https:\") {',\n            'return \"DIRECT;\";',\n          '}',\n          'return \"PROXY ' + localAddress +':9000; DIRECT;\";',\n        '}'\n      ].join('\\n\\r');\n      res.writeHeader(200, {\n        \"Content-Type\": \"application/octet-stream\"\n      });\n      res.end(pac);\n      return ;\n    }\n    next();\n  };\n};\nexports.localAddresses = [];\nvar _ = require('underscore');\n_.each(require('os').networkInterfaces(), function (networkInterface) {\n  _.each(networkInterface, function (item) {\n    exports.localAddresses.push(item.address);\n  });\n});","/home/travis/build/npmtest/node-npmtest-clam/node_modules/clam/lib/pageparser.js":"","/home/travis/build/npmtest/node-npmtest-clam/node_modules/clam/lib/selectfile.js":"var fs = require(\"fs\");\nvar path = require(\"path\");\nvar _ = require(\"underscore\");\nvar curDir = \"/\";\n//获取列表\nfunction getTree(root) {\n    var files = [];\n    var fileItems;\n    curDir = root?root:curDir;\n    \n    if (!fs.existsSync(curDir)) {\n        throw \"Can't find folder\";\n        return;\n    }\n    var stat = fs.statSync(curDir);\n    \n    if (stat.isDirectory()) {\n        fileItems = fs.readdirSync(curDir);\n        if(curDir!=\"/\"){\n            files.push({\n                name : \"..\",\n                path : path.join(curDir, \"..\"),\n                icon : \"icon-arrow-up\",\n                type : \"folder\"\n            });\n        }\n        _.each(fileItems, function(name) {\n            var p = path.join(curDir, name);\n            var s = fs.statSync(p);\n            var isD = s.isDirectory();\n            var icon = isD ? \"icon-folder-open\" : \"icon-file\";\n            var type = isD ? \"folder\" : \"file\";\n            if(name.indexOf(\".\")==0)return;\n            files.push({\n                name : name,\n                path : p,\n                icon : icon,\n                type : type\n            });\n        });\n    }\n    \n    return {\n        files:files,\n        cur:curDir\n    }\n}\n\nmodule.exports.getTree = getTree;\n","/home/travis/build/npmtest/node-npmtest-clam/node_modules/clam/lib/server.js":"var project = require('../lib/project.js');\n\nvar jsonHandle = require('./jsonHandle.js');\nvar dataApiHandle = require('./dataApiHandle.js');\nvar debug = require('debug')('clam:server');\nvar config = require('./config.js');\nvar _ = require('underscore');\nvar fs = require(\"fs\");\nvar path = require(\"path\");\nvar util = require(\"util\");\nvar HOST_NAME = 'clam.com';\nvar inspector = require('condenser')(HOST_NAME);\nvar doji = require('doji');\nvar flexCombo = require(\"flex-combo\");\nvar essi = require(\"essi\");\n\nexports = module.exports = function (needInject, basePath, port, sport) {\n  var config_dir = \".clam\";\n  [\"buildhistory\", \"mock\", \"gconfig\"].forEach(function (i) {\n    var file = path.join(process.cwd(), config_dir, i+\".json\");\n    if (fs.existsSync(file)) {\n      fs.unlink(file);\n    }\n  });\n\n  var absConfDir = path.join(process.cwd(), config_dir);\n  if (!fs.existsSync(absConfDir)) {\n    fs.mkdirSync(absConfDir);\n  }\n\n  var gitignore = path.join(process.cwd(), \".gitignore\");\n  var ig = fs.existsSync(gitignore) ? fs.readFileSync(gitignore) : null;\n  if (!ig || !/\\.cache/.test(ig)) {\n    fs.appendFile(gitignore, \"\\n.cache/\\n\", function () {\n      fs.chmod(gitignore, 0777);\n    });\n  }\n  if (!ig || !/node_modules/.test(ig)) {\n    fs.appendFile(gitignore, \"\\nnode_modules/\\n\", function () {\n      fs.chmod(gitignore, 0777);\n    });\n  }\n\n  var prjInfo = project();\n\n  var ports = [80, 443];\n  if (typeof prjInfo.port == \"number\" || typeof prjInfo.port == \"string\") {\n    ports[0] = parseInt(prjInfo.port);\n  }\n  else if (util.isArray(prjInfo.port)) {\n    ports = prjInfo.port;\n  }\n\n  var hostsInfo = prjInfo.hosts;\n  if (typeof hostsInfo != \"undefined\") {\n    hostsInfo += '\\n127.0.0.1 ' + HOST_NAME;\n    var hostsArr = hostsInfo.split(/[\\n\\r]{1,}/g);\n    var hostsObj = {};\n    var tmp;\n    for (var i = 0; i < hostsArr.length; i++) {\n      tmp = hostsArr[i].split(/\\s{1,}/g);\n      if (tmp.length >= 2) {\n        if (!hostsObj[tmp[0]]) {\n          hostsObj[tmp[0]] = [];\n        }\n        for (var j = 1; j < tmp.length; j++) {\n          hostsObj[tmp[0]].push(tmp[j]);\n        }\n      }\n    }\n    var fhConfFile = path.join(absConfDir, \"flex-hosts.json\");\n    if (!fs.existsSync(fhConfFile)) {\n      fs.writeFileSync(fhConfFile, JSON.stringify(hostsObj, null, 2));\n      fs.chmod(fhConfFile, 0777);\n    }\n  }\n\n  var essiConf = essi.config;\n  var essiFlag = false;\n  var cdnPath = prjInfo.cdnPath;\n  if (cdnPath) {\n    essiConf.cdnPath = cdnPath;\n    essiFlag = true;\n  }\n  var essiCharset = prjInfo.charset;\n  if (essiCharset && essiCharset[0]) {\n    essiConf.charset = essiCharset[0];\n    essiFlag = true;\n  }\n\n  var essiConfFile = path.join(absConfDir, \"essi.json\");\n  if (essiFlag && !fs.existsSync(essiConfFile)) {\n    fs.writeFileSync(essiConfFile, JSON.stringify(essiConf, null, 2));\n    fs.chmod(essiConfFile, 0777);\n  }\n\n  var fcConf = flexCombo.config;\n  var fcFlag = false;\n  var fcCharset = prjInfo.charset;\n  if (fcCharset && fcCharset[1]) {\n    fcConf.charset = essiCharset[1];\n    fcFlag = true;\n  }\n  var fcUrls = prjInfo.urls;\n  if (fcUrls) {\n    fcConf.urls = fcUrls;\n    fcFlag = true;\n  }\n  var fcdefine = prjInfo.define;\n  if (fcdefine) {\n    if (!fcConf['dac/tpl']) {\n      fcConf['dac/tpl'] = {filter:{}};\n    }\n    fcConf['dac/tpl'].define = fcdefine;\n    fcFlag = true;\n  }\n  var fcanonymous = prjInfo.anonymous;\n  if (fcanonymous) {\n    if (!fcConf['dac/tpl']) {\n      fcConf['dac/tpl'] = {filter:{}};\n    }\n    fcConf['dac/tpl'].anonymous = fcanonymous;\n    fcFlag = true;\n  }\n  var fcConfFile = path.join(absConfDir, \"flex-combo.json\");\n  if (fcFlag && !fs.existsSync(fcConfFile)) {\n    fs.writeFileSync(fcConfFile, JSON.stringify(fcConf, null, 2));\n    fs.chmod(fcConfFile, 0777);\n  }\n\n  var plugBase = require(\"plug-base\");\n  plugBase.root(basePath ? basePath : \"src\");\n  plugBase.config(config_dir);\n  plugBase\n    .use(doji.PACHandle())\n    .use(inspector)\n    .use(dataApiHandle())\n    .use(jsonHandle.json(prjInfo))\n    .plug(require(\"flex-combo\"), {filter:{\n      '\\\\/\\\\$CLAM_VER\\\\$': ''\n    }})\n    .plug(require(\"essi\"))\n    .listen(port || ports[0] || 80, sport || ports[1] || 443);\n\n  var clamApp = plugBase.app;\n  var clamServer = plugBase.http;\n  var proxyInfo = _.extend({\n    port: 9000,\n    dojiDir: '',\n    urls: {},\n    hosts: {},\n    filters: {},\n    parsers: [],\n    timestamp: false,\n    widgets: {}\n  }, prjInfo.proxy);\n\n  if (needInject) {\n    proxyInfo.parsers.unshift(function (buffer, proxyRes, req) {\n      debug('Now inject the inspector for mobile');\n      return inspector.inject(buffer, req.serverIP);\n    });\n    inspector.connect(clamServer);\n  }\n\n  var proxyApp = doji(proxyInfo);\n  config.on('projectChange', function () {\n    proxyApp.config(config.get('project').proxy || {});\n  });\n  proxyApp.listen(proxyInfo.port);\n  proxyApp.on('req:start', function (req) {\n    console.log('=> Proxy request method: \\x1B[32m%s\\x1B[39m path: \\x1B[34m%s\\x1B[39m', req.method, req.url);\n  });\n  proxyApp.on('proxy:circle', clamApp);\n  proxyApp.on('proxy:local', clamApp);\n\n  var ignore = [\"name\", \"charset\", \"dataApi\", \"port\", \"json\"];\n  for (var k in prjInfo) {\n    if (ignore.indexOf(k) == -1) {\n      delete prjInfo[k];\n    }\n  }\n  var prjFile = path.join(process.cwd(), config_dir, \"project.json\");\n  fs.writeFile(prjFile, JSON.stringify(prjInfo, null, 2), function () {\n    fs.chmod(prjFile, 0777);\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-clam/node_modules/clam/lib/util/datagen.js":"var fs = require('fs');\nvar path = require('path');\nvar _ = require('underscore');\nvar J = require(\"juicer\");\n\nvar data = {\n    success:true,\n    data:{\n        items:[]\n    }\n}\nvar item = {\n    id:12121,\n    img:\"http://img03.taobaocdn.com/tps/i3/T1vZelXhlBXXXXXXXX-310-310.jpg_120x120.jpg\",\n    price:12.11,\n    info:\"五区/万色星辰/联盟\",\n    desc:\"84000万金币(DNF游戏币)=200元 地下城与勇士体验区 即买即发\",\n    unitprice:\"0.0021 元/金币\",\n    count:\"36000万金币\"\n}\nfor(var i=0; i<6; i++){\n    data.data.items.push(_.clone(item));\n}\nconsole.log(JSON.stringify(data));\n","/home/travis/build/npmtest/node-npmtest-clam/node_modules/clam/lib/util/ssi.js":"var fs = require('fs');\nvar path = require(\"path\");\n\nexports.getHtml = function(res, fullpath) {\n    var str = fs.readFileSync(fullpath).toString();\n    var regInclude = /<!--#include \".+\"-->/gi, regPath = /<!--#include \"(.+)\"-->/i;\n    var matchArr = str.match(regInclude);\n\n    if (matchArr) {\n        for (var i = 0; i < matchArr.length; i++) {\n            var realpath = path.join(path.dirname(fullpath),matchArr[i].match(regPath)[1]);\n            var getHtml = fs.readFileSync(realpath).toString();\n            str = str.replace(matchArr[i],getHtml);\n        }\n    }\n    return str;\n\n}; ","/home/travis/build/npmtest/node-npmtest-clam/node_modules/clam/lib/util/tidy.js":"var spawn = require('child_process').spawn;\nvar fs = require('fs');\n/*\n\n Style HTML\n---------------\n\n  Written by Nochum Sossonko, (nsossonko@hotmail.com)\n\n  Based on code initially developed by: Einar Lielmanis, <elfz@laacz.lv>\n    http://jsbeautifier.org/\n\n\n  You are free to use this in any way you want, in case you find this useful or working for you.\n\n  Usage:\n    style_html(html_source);\n\n    style_html(html_source, options);\n\n  The options are:\n    indent_size (default 4)          — indentation size,\n    indent_char (default space)      — character to indent with,\n    max_char (default 70)            -  maximum amount of characters per line,\n    brace_style (default \"collapse\") - \"collapse\" | \"expand\" | \"end-expand\"\n            put braces on the same line as control statements (default), or put braces on own line (Allman / ANSI style), or just put end braces on own line.\n    unformatted (defaults to inline tags) - list of tags, that shouldn't be reformatted\n    indent_scripts (default normal)  - \"keep\"|\"separate\"|\"normal\"\n\n    e.g.\n\n    style_html(html_source, {\n      'indent_size': 2,\n      'indent_char': ' ',\n      'max_char': 78,\n      'brace_style': 'expand',\n      'unformatted': ['a', 'sub', 'sup', 'b', 'i', 'u']\n    });\n*/\n\nfunction style_html(html_source, options) {\n//Wrapper function to invoke all the necessary constructors and deal with the output.\n\n  var multi_parser,\n      indent_size,\n      indent_character,\n      max_char,\n      brace_style,\n      unformatted;\n\n  options = options || {};\n  indent_size = options.indent_size || 4;\n  indent_character = options.indent_char || ' ';\n  brace_style = options.brace_style || 'collapse';\n  max_char = options.max_char == 0 ? Infinity : options.max_char || 70;\n  unformatted = options.unformatted || ['a', 'span', 'bdo', 'em', 'strong', 'dfn', 'code', 'samp', 'kbd', 'var', 'cite', 'abbr', 'acronym', 'q', 'sub', 'sup', 'tt', 'i', 'b', 'big', 'small', 'u', 's', 'strike', 'font', 'ins', 'del', 'pre', 'address', 'dt', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6'];\n\n  function Parser() {\n\n    this.pos = 0; //Parser position\n    this.token = '';\n    this.current_mode = 'CONTENT'; //reflects the current Parser mode: TAG/CONTENT\n    this.tags = { //An object to hold tags, their position, and their parent-tags, initiated with default values\n      parent: 'parent1',\n      parentcount: 1,\n      parent1: ''\n    };\n    this.tag_type = '';\n    this.token_text = this.last_token = this.last_text = this.token_type = '';\n\n    this.Utils = { //Uilities made available to the various functions\n      whitespace: \"\\n\\r\\t \".split(''),\n      single_token: 'br,input,link,meta,!doctype,basefont,base,area,hr,wbr,param,img,isindex,?xml,embed,?php,?,?='.split(','), //all the single tags for HTML\n      extra_liners: 'head,body,/html'.split(','), //for tags that need a line of whitespace before them\n      in_array: function (what, arr) {\n        for (var i=0; i<arr.length; i++) {\n          if (what === arr[i]) {\n            return true;\n          }\n        }\n        return false;\n      }\n    }\n\n    this.get_content = function () { //function to capture regular content between tags\n\n      var input_char = '',\n          content = [],\n          space = false; //if a space is needed\n\n      while (this.input.charAt(this.pos) !== '<') {\n        if (this.pos >= this.input.length) {\n          return content.length?content.join(''):['', 'TK_EOF'];\n        }\n\n        input_char = this.input.charAt(this.pos);\n        this.pos++;\n        this.line_char_count++;\n\n        if (this.Utils.in_array(input_char, this.Utils.whitespace)) {\n          if (content.length) {\n            space = true;\n          }\n          this.line_char_count--;\n          continue; //don't want to insert unnecessary space\n        }\n        else if (space) {\n          if (this.line_char_count >= this.max_char) { //insert a line when the max_char is reached\n            content.push('\\n');\n            for (var i=0; i<this.indent_level; i++) {\n              content.push(this.indent_string);\n            }\n            this.line_char_count = 0;\n          }\n          else{\n            content.push(' ');\n            this.line_char_count++;\n          }\n          space = false;\n        }\n        content.push(input_char); //letter at-a-time (or string) inserted to an array\n      }\n      return content.length?content.join(''):'';\n    }\n\n    this.get_contents_to = function (name) { //get the full content of a script or style to pass to js_beautify\n      if (this.pos == this.input.length) {\n        return ['', 'TK_EOF'];\n      }\n      var input_char = '';\n      var content = '';\n      var reg_match = new RegExp('\\<\\/' + name + '\\\\s*\\>', 'igm');\n      reg_match.lastIndex = this.pos;\n      var reg_array = reg_match.exec(this.input);\n      var end_script = reg_array?reg_array.index:this.input.length; //absolute end of script\n      if(this.pos < end_script) { //get everything in between the script tags\n        content = this.input.substring(this.pos, end_script);\n        this.pos = end_script;\n      }\n      return content;\n    }\n\n    this.record_tag = function (tag){ //function to record a tag and its parent in this.tags Object\n      if (this.tags[tag + 'count']) { //check for the existence of this tag type\n        this.tags[tag + 'count']++;\n        this.tags[tag + this.tags[tag + 'count']] = this.indent_level; //and record the present indent level\n      }\n      else { //otherwise initialize this tag type\n        this.tags[tag + 'count'] = 1;\n        this.tags[tag + this.tags[tag + 'count']] = this.indent_level; //and record the present indent level\n      }\n      this.tags[tag + this.tags[tag + 'count'] + 'parent'] = this.tags.parent; //set the parent (i.e. in the case of a div this.tags.div1parent)\n      this.tags.parent = tag + this.tags[tag + 'count']; //and make this the current parent (i.e. in the case of a div 'div1')\n    }\n\n    this.retrieve_tag = function (tag) { //function to retrieve the opening tag to the corresponding closer\n      if (this.tags[tag + 'count']) { //if the openener is not in the Object we ignore it\n        var temp_parent = this.tags.parent; //check to see if it's a closable tag.\n        while (temp_parent) { //till we reach '' (the initial value);\n          if (tag + this.tags[tag + 'count'] === temp_parent) { //if this is it use it\n            break;\n          }\n          temp_parent = this.tags[temp_parent + 'parent']; //otherwise keep on climbing up the DOM Tree\n        }\n        if (temp_parent) { //if we caught something\n          this.indent_level = this.tags[tag + this.tags[tag + 'count']]; //set the indent_level accordingly\n          this.tags.parent = this.tags[temp_parent + 'parent']; //and set the current parent\n        }\n        delete this.tags[tag + this.tags[tag + 'count'] + 'parent']; //delete the closed tags parent reference...\n        delete this.tags[tag + this.tags[tag + 'count']]; //...and the tag itself\n        if (this.tags[tag + 'count'] == 1) {\n          delete this.tags[tag + 'count'];\n        }\n        else {\n          this.tags[tag + 'count']--;\n        }\n      }\n    }\n\n    this.get_tag = function (peek) { //function to get a full tag and parse its type\n      var input_char = '',\n          content = [],\n          space = false,\n          tag_start, tag_end,\n          peek = typeof peek !== 'undefined' ? peek : false,\n          orig_pos = this.pos,\n          orig_line_char_count = this.line_char_count;\n\n      do {\n        if (this.pos >= this.input.length) {\n          if (peek) {\n            this.pos = orig_pos;\n            this.line_char_count = orig_line_char_count;\n          }\n          return content.length?content.join(''):['', 'TK_EOF'];\n        }\n\n        input_char = this.input.charAt(this.pos);\n        this.pos++;\n        this.line_char_count++;\n\n        if (this.Utils.in_array(input_char, this.Utils.whitespace)) { //don't want to insert unnecessary space\n          space = true;\n          this.line_char_count--;\n          continue;\n        }\n\n        if (input_char === \"'\" || input_char === '\"') {\n          if (!content[1] || content[1] !== '!') { //if we're in a comment strings don't get treated specially\n            input_char += this.get_unformatted(input_char);\n            space = true;\n          }\n        }\n\n        if (input_char === '=') { //no space before =\n          space = false;\n        }\n\n        if (content.length && content[content.length-1] !== '=' && input_char !== '>'\n            && space) { //no space after = or before >\n          if (this.line_char_count >= this.max_char) {\n            this.print_newline(false, content);\n            this.line_char_count = 0;\n          }\n          else {\n            content.push(' ');\n            this.line_char_count++;\n          }\n          space = false;\n        }\n        if (input_char === '<') {\n          tag_start = this.pos - 1;\n        }\n        content.push(input_char); //inserts character at-a-time (or string)\n      } while (input_char !== '>');\n\n      var tag_complete = content.join('');\n      var tag_index;\n      if (tag_complete.indexOf(' ') != -1) { //if there's whitespace, thats where the tag name ends\n        tag_index = tag_complete.indexOf(' ');\n      }\n      else { //otherwise go with the tag ending\n        tag_index = tag_complete.indexOf('>');\n      }\n      var tag_check = tag_complete.substring(1, tag_index).toLowerCase();\n      if (tag_complete.charAt(tag_complete.length-2) === '/' ||\n        this.Utils.in_array(tag_check, this.Utils.single_token)) { //if this tag name is a single tag type (either in the list or has a closing /)\n        if ( ! peek) {\n          this.tag_type = 'SINGLE';\n        }\n      }\n      else if (tag_check === 'script') { //for later script handling\n        if ( ! peek) {\n          this.record_tag(tag_check);\n          this.tag_type = 'SCRIPT';\n        }\n      }\n      else if (tag_check === 'style') { //for future style handling (for now it justs uses get_content)\n        if ( ! peek) {\n          this.record_tag(tag_check);\n          this.tag_type = 'STYLE';\n        }\n      }\n      else if (this.is_unformatted(tag_check, unformatted)) { // do not reformat the \"unformatted\" tags\n        var comment = this.get_unformatted('</'+tag_check+'>', tag_complete); //...delegate to get_unformatted function\n        content.push(comment);\n        // Preserve collapsed whitespace either before or after this tag.\n        if (tag_start > 0 && this.Utils.in_array(this.input.charAt(tag_start - 1), this.Utils.whitespace)){\n            content.splice(0, 0, this.input.charAt(tag_start - 1));\n        }\n        tag_end = this.pos - 1;\n        if (this.Utils.in_array(this.input.charAt(tag_end + 1), this.Utils.whitespace)){\n            content.push(this.input.charAt(tag_end + 1));\n        }\n        this.tag_type = 'SINGLE';\n      }\n      else if (tag_check.charAt(0) === '!') { //peek for <!-- comment\n        if (tag_check.indexOf('[if') != -1) { //peek for <!--[if conditional comment\n          if (tag_complete.indexOf('!IE') != -1) { //this type needs a closing --> so...\n            var comment = this.get_unformatted('-->', tag_complete); //...delegate to get_unformatted\n            content.push(comment);\n          }\n          if ( ! peek) {\n            this.tag_type = 'START';\n          }\n        }\n        else if (tag_check.indexOf('[endif') != -1) {//peek for <!--[endif end conditional comment\n          this.tag_type = 'END';\n          this.unindent();\n        }\n        else if (tag_check.indexOf('[cdata[') != -1) { //if it's a <[cdata[ comment...\n          var comment = this.get_unformatted(']]>', tag_complete); //...delegate to get_unformatted function\n          content.push(comment);\n          if ( ! peek) {\n            this.tag_type = 'SINGLE'; //<![CDATA[ comments are treated like single tags\n          }\n        }\n        else {\n          var comment = this.get_unformatted('-->', tag_complete);\n          content.push(comment);\n          this.tag_type = 'SINGLE';\n        }\n      }\n      else if ( ! peek) {\n        if (tag_check.charAt(0) === '/') { //this tag is a double tag so check for tag-ending\n          this.retrieve_tag(tag_check.substring(1)); //remove it and all ancestors\n          this.tag_type = 'END';\n        }\n        else { //otherwise it's a start-tag\n          this.record_tag(tag_check); //push it on the tag stack\n          this.tag_type = 'START';\n        }\n        if (this.Utils.in_array(tag_check, this.Utils.extra_liners)) { //check if this double needs an extra line\n          this.print_newline(true, this.output);\n        }\n      }\n\n      if (peek) {\n        this.pos = orig_pos;\n        this.line_char_count = orig_line_char_count;\n      }\n\n      return content.join(''); //returns fully formatted tag\n    }\n\n    this.get_unformatted = function (delimiter, orig_tag) { //function to return unformatted content in its entirety\n\n      if (orig_tag && orig_tag.toLowerCase().indexOf(delimiter) != -1) {\n        return '';\n      }\n      var input_char = '';\n      var content = '';\n      var space = true;\n      do {\n\n        if (this.pos >= this.input.length) {\n          return content;\n        }\n\n        input_char = this.input.charAt(this.pos);\n        this.pos++\n\n        if (this.Utils.in_array(input_char, this.Utils.whitespace)) {\n          if (!space) {\n            this.line_char_count--;\n            continue;\n          }\n          if (input_char === '\\n' || input_char === '\\r') {\n            content += '\\n';\n            /*  Don't change tab indention for unformatted blocks.  If using code for html editing, this will greatly affect <pre> tags if they are specified in the 'unformatted array'\n            for (var i=0; i<this.indent_level; i++) {\n              content += this.indent_string;\n            }\n            space = false; //...and make sure other indentation is erased\n            */\n            this.line_char_count = 0;\n            continue;\n          }\n        }\n        content += input_char;\n        this.line_char_count++;\n        space = true;\n\n\n      } while (content.toLowerCase().indexOf(delimiter) == -1);\n      return content;\n    }\n\n    this.get_token = function () { //initial handler for token-retrieval\n      var token;\n\n      if (this.last_token === 'TK_TAG_SCRIPT' || this.last_token === 'TK_TAG_STYLE') { //check if we need to format javascript\n       var type = this.last_token.substr(7)\n       token = this.get_contents_to(type);\n        if (typeof token !== 'string') {\n          return token;\n        }\n        return [token, 'TK_' + type];\n      }\n      if (this.current_mode === 'CONTENT') {\n        token = this.get_content();\n        if (typeof token !== 'string') {\n          return token;\n        }\n        else {\n          return [token, 'TK_CONTENT'];\n        }\n      }\n\n      if (this.current_mode === 'TAG') {\n        token = this.get_tag();\n        if (typeof token !== 'string') {\n          return token;\n        }\n        else {\n          var tag_name_type = 'TK_TAG_' + this.tag_type;\n          return [token, tag_name_type];\n        }\n      }\n    }\n\n    this.get_full_indent = function (level) {\n      level = this.indent_level + level || 0;\n      if (level < 1)\n        return '';\n\n      return Array(level + 1).join(this.indent_string);\n    }\n\n    this.is_unformatted = function(tag_check, unformatted) {\n        //is this an HTML5 block-level link?\n        if (!this.Utils.in_array(tag_check, unformatted)){\n            return false;\n        }\n\n        if (tag_check.toLowerCase() !== 'a' || !this.Utils.in_array('a', unformatted)){\n            return true;\n        }\n\n        //at this point we have an  tag; is its first child something we want to remain\n        //unformatted?\n        var next_tag = this.get_tag(true /* peek. */);\n        if (next_tag && this.Utils.in_array(next_tag, unformatted)){\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    this.printer = function (js_source, indent_character, indent_size, max_char, brace_style) { //handles input/output and some other printing functions\n\n      this.input = js_source || ''; //gets the input for the Parser\n      this.output = [];\n      this.indent_character = indent_character;\n      this.indent_string = '';\n      this.indent_size = indent_size;\n      this.brace_style = brace_style;\n      this.indent_level = 0;\n      this.max_char = max_char;\n      this.line_char_count = 0; //count to see if max_char was exceeded\n\n      for (var i=0; i<this.indent_size; i++) {\n        this.indent_string += this.indent_character;\n      }\n\n      this.print_newline = function (ignore, arr) {\n        this.line_char_count = 0;\n        if (!arr || !arr.length) {\n          return;\n        }\n        if (!ignore) { //we might want the extra line\n          while (this.Utils.in_array(arr[arr.length-1], this.Utils.whitespace)) {\n            arr.pop();\n          }\n        }\n        arr.push('\\n');\n        for (var i=0; i<this.indent_level; i++) {\n          arr.push(this.indent_string);\n        }\n      }\n\n      this.print_token = function (text) {\n        this.output.push(text);\n      }\n\n      this.indent = function () {\n        this.indent_level++;\n      }\n\n      this.unindent = function () {\n        if (this.indent_level > 0) {\n          this.indent_level--;\n        }\n      }\n    }\n    return this;\n  }\n\n  /*_____________________--------------------_____________________*/\n\n  multi_parser = new Parser(); //wrapping functions Parser\n  multi_parser.printer(html_source, indent_character, indent_size, max_char, brace_style); //initialize starting values\n\n  while (true) {\n      var t = multi_parser.get_token();\n      multi_parser.token_text = t[0];\n      multi_parser.token_type = t[1];\n\n    if (multi_parser.token_type === 'TK_EOF') {\n      break;\n    }\n\n    switch (multi_parser.token_type) {\n      case 'TK_TAG_START':\n        multi_parser.print_newline(false, multi_parser.output);\n        multi_parser.print_token(multi_parser.token_text);\n        multi_parser.indent();\n        multi_parser.current_mode = 'CONTENT';\n        break;\n      case 'TK_TAG_STYLE':\n      case 'TK_TAG_SCRIPT':\n        multi_parser.print_newline(false, multi_parser.output);\n        multi_parser.print_token(multi_parser.token_text);\n        multi_parser.current_mode = 'CONTENT';\n        break;\n      case 'TK_TAG_END':\n        //Print new line only if the tag has no content and has child\n        if (multi_parser.last_token === 'TK_CONTENT' && multi_parser.last_text === '') {\n            var tag_name = multi_parser.token_text.match(/\\w+/)[0];\n            var tag_extracted_from_last_output = multi_parser.output[multi_parser.output.length -1].match(/<\\s*(\\w+)/);\n            if (tag_extracted_from_last_output === null || tag_extracted_from_last_output[1] !== tag_name)\n                multi_parser.print_newline(true, multi_parser.output);\n        }\n        multi_parser.print_token(multi_parser.token_text);\n        multi_parser.current_mode = 'CONTENT';\n        break;\n      case 'TK_TAG_SINGLE':\n        // Don't add a newline before elements that should remain unformatted.\n        var tag_check = multi_parser.token_text.match(/^\\s*<([a-z]+)/i);\n        if (!tag_check || !multi_parser.Utils.in_array(tag_check[1], unformatted)){\n            multi_parser.print_newline(false, multi_parser.output);\n        }\n        multi_parser.print_token(multi_parser.token_text);\n        multi_parser.current_mode = 'CONTENT';\n        break;\n      case 'TK_CONTENT':\n        if (multi_parser.token_text !== '') {\n          multi_parser.print_token(multi_parser.token_text);\n        }\n        multi_parser.current_mode = 'TAG';\n        break;\n      case 'TK_STYLE':\n      case 'TK_SCRIPT':\n        if (multi_parser.token_text !== '') {\n          multi_parser.output.push('\\n');\n          var text = multi_parser.token_text;\n          if (multi_parser.token_type == 'TK_SCRIPT') {\n            var _beautifier = typeof js_beautify == 'function' && js_beautify;\n          } else if (multi_parser.token_type == 'TK_STYLE') {\n            var _beautifier = typeof css_beautify == 'function' && css_beautify;\n          }\n\n          if (options.indent_scripts == \"keep\") {\n            var script_indent_level = 0;\n          } else if (options.indent_scripts == \"separate\") {\n            var script_indent_level = -multi_parser.indent_level;\n          } else {\n            var script_indent_level = 1;\n          }\n\n          var indentation = multi_parser.get_full_indent(script_indent_level);\n          if (_beautifier) {\n            // call the Beautifier if avaliable\n            text = _beautifier(text.replace(/^\\s*/, indentation), options);\n          } else {\n            // simply indent the string otherwise\n            var white = text.match(/^\\s*/)[0];\n            var _level = white.match(/[^\\n\\r]*$/)[0].split(multi_parser.indent_string).length - 1;\n            var reindent = multi_parser.get_full_indent(script_indent_level -_level);\n            text = text.replace(/^\\s*/, indentation)\n                   .replace(/\\r\\n|\\r|\\n/g, '\\n' + reindent)\n                   .replace(/\\s*$/, '');\n          }\n          if (text) {\n            multi_parser.print_token(text);\n            multi_parser.print_newline(true, multi_parser.output);\n          }\n        }\n        multi_parser.current_mode = 'TAG';\n        break;\n    }\n    multi_parser.last_token = multi_parser.token_type;\n    multi_parser.last_text = multi_parser.token_text;\n  }\n  return multi_parser.output.join('');\n}\nvar tidy = style_html;\n\nmodule.exports = tidy;"}